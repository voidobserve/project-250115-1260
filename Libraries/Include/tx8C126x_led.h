/**
  ******************************************************************************
  * @file    led.h
  * @author  HUGE-IC Application Team
  * @version V1.0.0
  * @date    01-05-2021
  * @brief   This file contains all the LED LL firmware functions.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2021 HUGE-IC</center></h2>
  *
  *
  */ 
  
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __LED_H__
#define __LED_H__

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/

/************************************************************************
|-----------------------------------------------------------------------|
|              | Bit |                    Description                   |
|              |--------------------------------------------------------|
|              |  7  | 控制 SEG7 使能和关闭  0x0:关闭  0x1:使能         |
|              |  6  | 控制 SEG6 使能和关闭  0x0:关闭  0x1:使能         |
|              |  5  | 控制 SEG5 使能和关闭  0x0:关闭  0x1:使能         |
| LED_SEGCONL  |  4  | 控制 SEG4 使能和关闭  0x0:关闭  0x1:使能         |
|              |  3  | 控制 SEG3 使能和关闭  0x0:关闭  0x1:使能         |
|              |  2  | 控制 SEG2 使能和关闭  0x0:关闭  0x1:使能         |
|              |  1  | 控制 SEG1 使能和关闭  0x0:关闭  0x1:使能         |
|              |  0  | 控制 SEG0 使能和关闭  0x0:关闭  0x1:使能         |
|              |     | Note:每个控制bit置1,则使能;写0,则关闭使能        |
|-------------------------------------------------------------------―---|
************************************************************************/
// LED_SEGCONL
#define _LED_SEGCONL
#define LED_SEG7_EN(n)            ((n) << 7)  // 控制 SEG7 使能和关闭  0x0:关闭  0x1:使能
#define LED_SEG6_EN(n)            ((n) << 6)  // 控制 SEG6 使能和关闭  0x0:关闭  0x1:使能
#define LED_SEG5_EN(n)            ((n) << 5)  // 控制 SEG5 使能和关闭  0x0:关闭  0x1:使能
#define LED_SEG4_EN(n)            ((n) << 4)  // 控制 SEG4 使能和关闭  0x0:关闭  0x1:使能
#define LED_SEG3_EN(n)            ((n) << 3)  // 控制 SEG3 使能和关闭  0x0:关闭  0x1:使能
#define LED_SEG2_EN(n)            ((n) << 2)  // 控制 SEG2 使能和关闭  0x0:关闭  0x1:使能
#define LED_SEG1_EN(n)            ((n) << 1)  // 控制 SEG1 使能和关闭  0x0:关闭  0x1:使能
#define LED_SEG0_EN(n)            ((n) << 0)  // 控制 SEG0 使能和关闭  0x0:关闭  0x1:使能

/************************************************************************
|-----------------------------------------------------------------------|
|              | Bit |                    Description                   |
|              |--------------------------------------------------------|
|              | 7:4 |                                                  |
|              |  3  | 控制 SEG11使能和关闭  0x0:关闭  0x1:使能         |
| LED_SEGCONH  |  2  | 控制 SEG10使能和关闭  0x0:关闭  0x1:使能         |
|              |  1  | 控制 SEG9 使能和关闭  0x0:关闭  0x1:使能         |
|              |  0  | 控制 SEG8 使能和关闭  0x0:关闭  0x1:使能         |
|              |     | Note:每个控制bit置1,则使能;写0,则关闭使能        |
|-------------------------------------------------------------------―---|
************************************************************************/
// LED_SEGCONH
#define _LED_SEGCONH
#define LED_SEG11_EN(n)           ((n) << 3)  // 控制 SEG11使能和关闭  0x0:关闭  0x1:使能
#define LED_SEG10_EN(n)           ((n) << 2)  // 控制 SEG10使能和关闭  0x0:关闭  0x1:使能
#define LED_SEG9_EN(n)            ((n) << 1)  // 控制 SEG9 使能和关闭  0x0:关闭  0x1:使能
#define LED_SEG8_EN(n)            ((n) << 0)  // 控制 SEG8 使能和关闭  0x0:关闭  0x1:使能

/************************************************************************
|-----------------------------------------------------------------------|
|              | Bit |                    Description                   |
|              |--------------------------------------------------------|
|              |  7  | 控制 COM7 使能和关闭  0x0:关闭  0x1:使能         |
|              |  6  | 控制 COM6 使能和关闭  0x0:关闭  0x1:使能         |
|              |  5  | 控制 COM5 使能和关闭  0x0:关闭  0x1:使能         |
| LED_COMCON   |  4  | 控制 COM4 使能和关闭  0x0:关闭  0x1:使能         |
|              |  3  | 控制 COM3 使能和关闭  0x0:关闭  0x1:使能         |
|              |  2  | 控制 COM2 使能和关闭  0x0:关闭  0x1:使能         |
|              |  1  | 控制 COM1 使能和关闭  0x0:关闭  0x1:使能         |
|              |  0  | 控制 COM0 使能和关闭  0x0:关闭  0x1:使能         |
|              |     | Note:每个控制bit置1,则使能;写0,则关闭使能        |
|-------------------------------------------------------------------―---|
************************************************************************/
// LED_COMCON
#define _LED_COMCON
#define LED_COM7_EN(n)            ((n) << 7)  // 控制 COM7 使能和关闭  0x0:关闭  0x1:使能
#define LED_COM6_EN(n)            ((n) << 6)  // 控制 COM6 使能和关闭  0x0:关闭  0x1:使能
#define LED_COM5_EN(n)            ((n) << 5)  // 控制 COM5 使能和关闭  0x0:关闭  0x1:使能
#define LED_COM4_EN(n)            ((n) << 4)  // 控制 COM4 使能和关闭  0x0:关闭  0x1:使能
#define LED_COM3_EN(n)            ((n) << 3)  // 控制 COM3 使能和关闭  0x0:关闭  0x1:使能
#define LED_COM2_EN(n)            ((n) << 2)  // 控制 COM2 使能和关闭  0x0:关闭  0x1:使能
#define LED_COM1_EN(n)            ((n) << 1)  // 控制 COM1 使能和关闭  0x0:关闭  0x1:使能
#define LED_COM0_EN(n)            ((n) << 0)  // 控制 COM0 使能和关闭  0x0:关闭  0x1:使能

/********************************************************************************************
|-------------------------------------------------------------------------------------------|
|              | Bit |                    Description                                       |
|              |----------------------------------------------------------------------------|
|              |  7  | LED扫完1帧的PENDING标志位,每扫完一帧都会置1,写1清零                  |
|              | 6:4 |                                                                      |
|              |  3  | LED扫完1帧中断使能位  0x0:不使能  0x1:使能                           |
|   LED_CON    |  2  | 这1位控制DMA拿数据的地址的偏移量  0x0:不偏移  0x1:地址向后偏移16byte,|
|              |     | (此位起到1个双buffer类似的作用)                                      |
|              |  1  | 扫描方式选择位  0x0:com扫描  0x1:seg扫描                             |
|              |  0  | LED使能位,使能之后从DMAADDRH和DMAADDRL的地址开始拿数据扫描点亮,      |
|              |     | 用户将数据写到对应的地址即可                                         |
|---------------------------------------------------------------------------------------―---|
********************************************************************************************/
// LED_CON
#define _LED_CON
#define LED_PENDING_FLAG(n)       ((n) << 7)  // LED扫完一帧的PENDING标志位,每扫完一帧都会置1,写1清零
#define LED_IRQ_EN(n)             ((n) << 3)  // LED扫完1帧中断使能位  0x0:不使能  0x1:使能
#define LED_DMAADR_SEL(n)        ((n) << 2)  // 这1位控制DMA拿数据的地址的偏移量  0x0:不偏移  0x1:地址向后偏移16byte,
                                              // (此位起到1个双buffer类似的作用)
#define LED_COM_SEG_SEL(n)        ((n) << 1)  // 扫描方式选择位  0x0:com扫描  0x1:seg扫描
#define LED_EN(n)                 ((n) << 0)  // LED使能位,使能之后从DMAADDRH和DMAADDRL的地址开始拿数据扫描点亮,
                                              // 用户将数据写到对应的地址即可

/************************************************************************************
|-----------------------------------------------------------------------------------|
|              | Bit |                    Description                               |
|              |--------------------------------------------------------------------|
| LED_TIMECON  | 7:0 | 扫描到某个com或seg时点亮的时间,步长为32微秒                  |
|-----------------------------------------------------------------------------------|
************************************************************************************/
// LED_TIMECON
#define _LED_TIMECON
#define LED_SCAN_TIME(n)          ((n) << 0)  // 扫描到某个com或seg时点亮的时间,步长为32微秒

/************************************************************************************
|-----------------------------------------------------------------------------------|
|              | Bit |                    Description                               |
|              |--------------------------------------------------------------------|
| LED_DMAADRL  | 7:0 | LED数据储存首地址的低8位                                     |
|-----------------------------------------------------------------------------------|
************************************************************************************/
// LED_DMAADRL
#define _LED_DMAADRL
#define LED_DMA_ADDR_L(n)         ((n) << 0)  // LED数据储存首地址的低8位

/************************************************************************************
|-----------------------------------------------------------------------------------|
|              | Bit |                    Description                               |
|              |--------------------------------------------------------------------|
| LED_DMAADRH  | 7:0 | LED数据储存首地址的高8位                                     |
|-----------------------------------------------------------------------------------|
************************************************************************************/
// LED_DMAADRH
#define _LED_DMAADRH
#define LED_DMA_ADDR_H(n)         ((n) << 0)  // LED数据储存首地址的高8位

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


#ifdef __cplusplus
}
#endif

#endif // __LED_H__

/**
  * @}
  */

/**
  * @}
  */

/*************************** (C) COPYRIGHT 2021 HUGE-IC ***** END OF FILE *****/
