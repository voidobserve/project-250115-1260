/**
  ******************************************************************************
  * @file    timer.h
  * @author  HUGE-IC Application Team
  * @version V1.0.0
  * @date    01-05-2021
  * @brief   This file contains all the TIMER LL firmware functions.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2021 HUGE-IC</center></h2>
  *
  *
  */ 
  
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __TIMER_H__
#define __TIMER_H__

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|                                           Simple Timer                                           |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/

/********************************************************************************
|-------------------------------------------------------------------------------|
|            | Bit |                    Description                             |
|            |------------------------------------------------------------------|
|            | 7:5 | 时钟源及计数源选择                                         |
|            |     | 0x0:选择GPIO（CAP PIN）作为时钟源;选择上升沿作为计数源;    |
|            |     | 0x1:选择GPIO（CAP PIN）作为时钟源;选择下降沿作为计数源;    |
|            |     | 0x2:选择HIRC作为时钟源;选择上升沿和下降沿作为计数源;       |
|            |     | 0x3:选择LIRC作为时钟源;选择上升沿和下降沿作为计数源;       |
| TMR0_CONL\ |     | 0x4:选择XOSC作为时钟源;选择上升沿和下降沿作为计数源;       |
| TMR1_CONL\ |     | 0x5:无计数源;                                              |
| TMR2_CONL\ |     | 0x6:选择系统时钟作为计数源;                                |
| TMR3_CONL\ |     | 0x7:选择系统时钟作为计数源;                                |
|  WUT_CONL  | 4:2 | TIMER 预分频配置                                           |
|            |     | 0x0:不分频  0x1:2分频  0x2:4分频  0x3:8分频                |
|            |     | 0x4:16分频  0x5:32分频 0x6:64分频 0x7:128分频              |
|            | 1:0 | 模式选择及计数使能(非零使能计数)                           |
|            |     | 0x0:不使能计数  0x1:计数器模式  0x2:PWM模式  0x3:捕获模式  |
|-------------------------------------------------------------------------------|
********************************************************************************/
// TMR0_CONL\TMR1_CONL\TMR2_CONL\TMR3_CONL\WUT_CONL
#define _TMR0_CONL
#define _TMR1_CONL
#define _TMR2_CONL
#define _TMR3_CONL
#define _WUT_CONL
#define TMR_SOURCE_SEL(n)           ((n) << 5)  // 时钟源及计数源选择
                                                // 0x0:选择GPIO（CAP PIN）作为时钟源;选择上升沿作为计数源;
                                                // 0x1:选择GPIO（CAP PIN）作为时钟源;选择下降沿作为计数源;
                                                // 0x2:选择HIRC作为时钟源;选择上升沿和下降沿作为计数源;
                                                // 0x3:选择LIRC作为时钟源;选择上升沿和下降沿作为计数源;
                                                // 0x4:选择XOSC作为时钟源;选择上升沿和下降沿作为计数源;
                                                // 0x5:无计数源;
                                                // 0x6:选择系统时钟作为计数源;
                                                // 0x7:选择系统时钟作为计数源;
#define TMR_PRESCALE_SEL(n)         ((n) << 2)  // TIMER 预分频配置
                                                // 0x0:不分频  0x1:2分频  0x2:4分频  0x3:8分频
                                                // 0x4:16分频  0x5:32分频 0x6:64分频 0x7:128分频
#define TMR_MODE_SEL(n)             ((n) << 0)  // 模式选择及计数使能(非零使能计数)
                                                // 0x0:不使能计数  0x1:计数器模式  0x2:PWM模式  0x3:捕获模式

/***************************************************************************************
|--------------------------------------------------------------------------------------|
|            | Bit |                    Description                                    |
|            |-------------------------------------------------------------------------|
|            |  7  | TIMER 计数pending位(写1清pending)                                 |
|            |     | 0x0:没有发生计数等于周期,或已清零  0x1:发生过计数等于周期         |
|            |  6  | TIMER 捕获pending位(写1清pending)                                 |
|            |     | 0x0:没有发生捕获事件  0x1:有发生捕获事件                          |
| TMR0_CONH\ |  5  | TIMER 计数中断使能位                                              |
| TMR1_CONH\ |     | 0x0:不使能计数中断  0x1:使能计数中断,计数等于周期时允许发生中断   |
| TMR2_CONH\ |  4  | TIMER 捕获中断使能位                                              |
| TMR3_CONH\ |     | 0x0:不使能捕获中断  0x1:使能捕获中断,发生捕获事件时允许发生中断   |
|  WUT_CONH  | 3:2 | TIMER 捕获源选择配置                                              |
|            |     | 0x0:引脚作为捕获源               0x1:引脚作为捕获源               |
|            |     | 0x2:比较器0的数字输出作为捕获源  0x3:比较器1的数字输出作为捕获源  |
|            | 1:0 | TIMER 捕获引脚的边沿触发设置.                                     |
|            |     | 0x0:上升沿触发捕获  0x1:下降沿触发捕获                            |
|            |     | 0x2:双边沿触发捕获  0x3:双边沿触发捕获                            |
|--------------------------------------------------------------------------------------|
***************************************************************************************/
// TMR0_CONH\TMR1_CONH\TMR2_CONH\TMR3_CONH\WUT_CONH
#define _TMR0_CONH
#define _TMR1_CONH
#define _TMR2_CONH
#define _TMR3_CONH
#define _WUT_CONH
#define TMR_PRD_PND(n)              ((n) << 7)  // TIMER 计数pending位(写1清pending)
                                                // 0x0:没有发生计数等于周期,或已清零  0x1:发生过计数等于周期
#define TMR_CAP_PND(n)              ((n) << 6)  // TIMER 捕获pending位(写1清pending)
                                                // 0x0:没有发生捕获事件  0x1:有发生捕获事件
#define TMR_PRD_IRQ_EN(n)           ((n) << 5)  // TIMER 计数中断使能位
                                                // 0x0:不使能计数中断  0x1:使能计数中断,计数等于周期时允许发生中断
#define TMR_CAP_IRQ_EN(n)           ((n) << 4)  // TIMER 捕获中断使能位
                                                // 0x0:不使能捕获中断  0x1:使能捕获中断,发生捕获事件时允许发生中断
#define TMR_CAP_SRC_SEL(n)          ((n) << 2)  // TIMER 捕获源选择配置
                                                // 0x0:引脚作为捕获源               0x1:引脚作为捕获源
                                                // 0x2:比较器0的数字输出作为捕获源  0x3:比较器1的数字输出作为捕获源
#define TMR_CAP_EDGE_SEL(n)         ((n) << 0)  // TIMER 捕获引脚的边沿触发设置
                                                // 0x0:上升沿触发捕获  0x1:下降沿触发捕获
                                                // 0x2:双边沿触发捕获  0x3:双边沿触发捕获

/************************************************************************
|-----------------------------------------------------------------------|
|            | Bit |                    Description                     |
| TMR0_CNTL\ |----------------------------------------------------------|
| TMR1_CNTL\ | 7:0 | TIMER 计数器低八位                                 |
| TMR2_CNTL\ |     |                                                    |
| TMR3_CNTL\ |     |                                                    |
|  WUT_CNTL  |     |                                                    |
|-----------------------------------------------------------------------|
************************************************************************/
// TMR0_CNTL\TMR1_CNTL\TMR2_CNTL\TMR3_CNTL\WUT_CNTL
#define _TMR0_CNTL
#define _TMR1_CNTL
#define _TMR2_CNTL
#define _TMR3_CNTL
#define _WUT_CNTL
#define TMR_COUNT_VAL_L(n)          ((n) << 0)  // TIMER 计数器低八位

/************************************************************************
|-----------------------------------------------------------------------|
|            | Bit |                    Description                     |
| TMR0_CNTH\ |----------------------------------------------------------|
| TMR1_CNTH\ | 7:0 | TIMER 计数器高八位                                 |
| TMR2_CNTH\ |     |                                                    |
| TMR3_CNTH\ |     |                                                    |
|  WUT_CNTH  |     |                                                    |
|-----------------------------------------------------------------------|
************************************************************************/
// TMR0_CNTH\TMR1_CNTH\TMR2_CNTH\TMR3_CNTH\WUT_CNTH
#define _TMR0_CNTH
#define _TMR1_CNTH
#define _TMR2_CNTH
#define _TMR3_CNTH
#define _WUT_CNTH
#define TMR_COUNT_VAL_H(n)          ((n) << 0)  // TIMER 计数器高八位

/************************************************************************
|-----------------------------------------------------------------------|
|            | Bit |                    Description                     |
| TMR0_PRL\  |----------------------------------------------------------|
| TMR1_PRL\  | 7:0 | TIMER 计数周期低八位                               |
| TMR2_PRL\  |     |                                                    |
| TMR3_PRL   |     |                                                    |
|  WUT_PRL   |     |                                                    |
|-----------------------------------------------------------------------|
************************************************************************/
// TMR0_PRL\TMR1_PRL\TMR2_PRL\TMR3_PRL\WUT_PRL
#define _TMR0_PRL
#define _TMR1_PRL
#define _TMR2_PRL
#define _TMR3_PRL
#define _WUT_PRL
#define TMR_PERIOD_VAL_L(n)         ((n) << 0)  // TIMER 计数周期低八位

/************************************************************************
|-----------------------------------------------------------------------|
|            | Bit |                    Description                     |
| TMR0_PRH\  |----------------------------------------------------------|
| TMR1_PRH\  | 7:0 | TIMER 计数周期高八位                               |
| TMR2_PRH\  |     |                                                    |
| TMR3_PRH\  |     |                                                    |
|  WUT_PRH   |     |                                                    |
|-----------------------------------------------------------------------|
************************************************************************/
// TMR0_PRH\TMR1_PRH\TMR2_PRH\TMR3_PRH\WUT_PRH
#define _TMR0_PRH
#define _TMR1_PRH
#define _TMR2_PRH
#define _TMR3_PRH
#define _WUT_PRH
#define TMR_PERIOD_VAL_H(n)         ((n) << 0)  // TIMER 计数周期高八位

/********************************************************************************
|-------------------------------------------------------------------------------|
|            | Bit |                    Description                             |
| TMR0_PWML\ |------------------------------------------------------------------|
| TMR1_PWML\ | 7:0 | TIMER 占空比低八位                                         |
| TMR2_PWML\ |     | PWM工作模式时,该值是设置位PWM的占空比设置值;捕获工作模式时,|
| TMR3_PWML\ |     | 当捕获到捕获源之后抓取的计数器低八位的值锁存在此寄存器中   |
|  WUT_PWML  |     |                                                            |
|-------------------------------------------------------------------------------|
********************************************************************************/
// TMR0_PWML\TMR1_PWML\TMR2_PWML\TMR3_PWML\WUT_PWML
#define _TMR0_PWML
#define _TMR1_PWML
#define _TMR2_PWML
#define _TMR3_PWML
#define _WUT_PWML
#define TMR_PWM_VAL_L(n)            ((n) << 0)  // TIMER 占空比低八位

/********************************************************************************
|-------------------------------------------------------------------------------|
|            | Bit |                    Description                             |
| TMR0_PWMH\ |------------------------------------------------------------------|
| TMR1_PWMH\ | 7:0 | TIMER 占空比高八位                                         |
| TMR2_PWMH\ |     | PWM工作模式时,该值是设置位PWM的占空比设置值;捕获工作模式时,|
| TMR3_PWMH\ |     | 当捕获到捕获源之后抓取的计数器高八位的值锁存在此寄存器中   |
|  WUT_PWMH  |     |                                                            |
|-------------------------------------------------------------------------------|
********************************************************************************/
// TMR0_PWMH\TMR1_PWMH\TMR2_PWMH\TMR3_PWMH\WUT_PWMH
#define _TMR0_PWMH
#define _TMR1_PWMH
#define _TMR2_PWMH
#define _TMR3_PWMH
#define _WUT_PWMH
#define TMR_PWM_VAL_H(n)            ((n) << 0)  // TIMER 占空比高八位

/********************************************************************************
|-------------------------------------------------------------------------------|
|            | Bit |                    Description                             |
|            |------------------------------------------------------------------|
| TMR0_PWML1\| 7:0 | TIMER 占空比影子寄存器低八位                               |
| TMR1_PWML1 |     | PWM工作模式时,当计数器值等于周期值时,                      |
|            |     | 将加载此寄存器中的值到占空比寄存器PWML                     |
|-------------------------------------------------------------------------------|
********************************************************************************/
// TMR0_PWML1\TMR1_PWML1 (注意: TIMER2、TIMER3、WUT没有此寄存器)
#define _TMR0_PWML1
#define _TMR1_PWML1
#define TMR_PWM_SHADOW_L(n)         ((n) << 0)  // TIMER 占空比影子寄存器低八位

/********************************************************************************
|-------------------------------------------------------------------------------|
|            | Bit |                    Description                             |
|            |------------------------------------------------------------------|
| TMR0_PWMH1\| 7:0 | TIMER 占空比影子寄存器高八位  (注意:TIMER2 TIMER3此寄存器) |
| TMR1_PWMH1 |     | PWM工作模式时,当计数器值等于周期值时,                      |
|            |     | 将加载此寄存器中的值到占空比寄存器PWMH                     |
|-------------------------------------------------------------------------------|
********************************************************************************/
// TMR0_PWMH1\TMR1_PWMH1 (注意: TIMER2、TIMER3、WUT没有此寄存器)
#define _TMR0_PWMH1
#define _TMR1_PWMH1
#define TMR_PWM_SHADOW_H(n)         ((n) << 0)  // TIMER 占空比影子寄存器高八位



/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|                                            BUZ                                                   |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
|            |  7  | 计数使能  0x0:不使能  0x1:使能                                                |
|            |  6  | 计数标志位(写1清零,写0无效)  0x0:没有产生标志  0x1:计数等于BUZDIV时产生标志   |
|   BUZ_CON  |  5  | 计数中断使能  0x0:不使能  0x1:当计数等于BUZDIV时允许中断发生                  |
|            |  4  | 模式选择及计数使能  0x0:PWM模式  0x1:计数器模式                               |
|            |  3  |                                                                               |
|            | 2:0 | TIMER 预分频配置                                                              |
|            |     | 0x0:不分频  0x1:2分频   0x2:4分频   0x3:8分频                                 |
|            |     | 0x4:16分频  0x5:32分频  0x6:64分频  0x7:128分频                               |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// BUZ_CON
#define _BUZ_CON
#define BUZ_EN(n)                   ((n) << 7)  // 计数使能  0x0:不使能  0x1:使能
#define BUZ_PRD_PND(n)              ((n) << 6)  // 计数标志位(写1清零,写0无效)  0x0:没有产生标志  0x1:计数等于BUZDIV时产生标志
#define BUZ_PRD_IRQ_EN(n)           ((n) << 5)  // 计数中断使能  0x0:不使能  0x1:当计数等于BUZDIV时允许中断发生
#define BUZ_MODE_SEL(n)             ((n) << 4)  // 模式选择及计数使能  0x0:PWM模式  0x1:计数器模式
#define BUZ_PRESCALE_SEL(n)         ((n) << 0)  // TIMER 预分频配置
                                                // 0x0:不分频  0x1:2分频   0x2:4分频   0x3:8分频
                                                // 0x4:16分频  0x5:32分频  0x6:64分频  0x7:128分频

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
|   BUZ_DIV  | 7:0 | 计数周期,计数模式下为周期,PWM模式下当计数值等于BUZDIV时输出翻转               |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// BUZ_DIV
#define _BUZ_DIV
#define BUZ_PERIOD_VAL(n)           ((n) << 0)  // 计数周期,计数模式下为周期,PWM模式下当计数值等于BUZDIV时输出翻转



/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|                                           Normal Timer                                           |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
|            | 7:6 |                                                                               |
| TMR_ALLCON |  5  | Wake Up Timer 计数清零  写1清零，写0无效                                      |
|            |  4  | Timer4 计数清零  写1清零，写0无效                                             |
|            |  3  | Timer3 计数清零  写1清零，写0无效                                             |
|            |  2  | Timer2 计数清零  写1清零，写0无效                                             |
|            |  1  | Timer1 计数清零  写1清零，写0无效                                             |
|            |  0  | Timer0 计数清零  写1清零，写0无效                                             |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR_ALLCON
#define _TMR_ALLCON
#define WUT_CNT_CLR(n)              ((n) << 5)  // Wake Up Timer 计数清零  写1清零，写0无效
#define TMR4_CNT_CLR(n)             ((n) << 4)  // Timer4 计数清零  写1清零，写0无效
#define TMR3_CNT_CLR(n)             ((n) << 3)  // Timer3 计数清零  写1清零，写0无效
#define TMR2_CNT_CLR(n)             ((n) << 2)  // Timer2 计数清零  写1清零，写0无效
#define TMR1_CNT_CLR(n)             ((n) << 1)  // Timer1 计数清零  写1清零，写0无效
#define TMR0_CNT_CLR(n)             ((n) << 0)  // Timer0 计数清零  写1清零，写0无效

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
|            | 7:5 | TIMER 预分频配置                                                              |
|            |     | 0x0:不分频  0x1:2分频   0x2:4分频   0x3:8分频                                 |
|            |     | 0x4:16分频  0x5:32分频  0x6:64分频  0x7:128分频                               |
| TMR4_CON0  | 4:2 | 计数信号选择  0x0:系统时钟   0x1:LIRC上升沿     0x2:HIRC上升沿                |
|            |     |               0x3:XOSC上升沿 0x4:GPIO输入上升沿 0x5:GPIO输入下降沿            |
|            |     |               0x6:GPIO输入边沿(上升下降)        0x7:系统时钟                  |
|            | 1:0 | 模式选择  0x0:定时器计数模式  0x1:PWM输出模式  0x2:捕获模式  0x3:保留         |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CON0
#define _TMR4_CON0
#define TMR4_PRESCALE_SEL(n)        ((n) << 5)  // TIMER 预分频配置
                                                // 0x0:不分频  0x1:2分频   0x2:4分频   0x3:8分频
                                                // 0x4:16分频  0x5:32分频  0x6:64分频  0x7:128分频
#define TMR4_SOURCE_SEL(n)          ((n) << 2)  // 计数信号选择  0x0:系统时钟   0x1:LIRC上升沿     0x2:HIRC上升沿
                                                //               0x3:XOSC上升沿 0x4:GPIO输入上升沿 0x5:GPIO输入下降沿
                                                //               0x6:GPIO输入边沿(上升下降)        0x7:系统时钟
#define TMR4_MODE_SEL(n)            ((n) << 0)  // 模式选择  0x0:定时器计数模式  0x1:PWM输出模式  0x2:捕获模式  0x3:保留

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
|            |  7  |                                                                               |
|            | 6:5 | 捕获信号源选择                                                                |
|            |     | 0x0:GPIO输入或LIRC 8分频(8K)  0x1:CAP PIN0/1/2  0x2:比较器0  0x3:比较器1      |
| TMR4_CON1  | 4:0 |                                                                               |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CON1
#define _TMR4_CON1
#define TMR4_CAP_SRC_SEL(n)         ((n) << 5)  // 捕获信号源选择
                                                // 0x0:GPIO输入或LIRC 8分频(8K)  0x1:CAP_PIN0/1/2  0x2:比较器0  0x3:比较器1
#define TMR4_SYNC_OUT_SEL(n)        ((n) << 3)  // 同步输出信号选择
                                                // 0x0:计数等于周期  0x1:计数等于比较值  0x2:保留  0x3:PWM_OUT(PWM输出)
#define TMR4_SYNC_IN_SEL(n)         ((n) << 2)  // 同步输入极性  0x0:正常输入  0x1:取反输入
#define TMR4_SLAVE_MODE(n)          ((n) << 0)  // 从模式选择  0x0:保留  0x1:触发模式  0x2:复位模式  0x3:门控模式

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
|            |  7  | 3级捕获信号极性  0x0:选择上升沿  0x1:选择下降沿                               |
|            |     |                  Note:要选择双沿请配置CAPSEL == 0x1;                          |
|            |  6  | 2级捕获信号极性  0x0:选择上升沿  0x1:选择下降沿                               |
|            |     |                  Note:要选择双沿请配置CAPSEL == 0x1;                          |
|            |  5  | 1级捕获信号极性  0x0:选择上升沿  0x1:选择下降沿                               |
|            |     |                  Note:要选择双沿请配置CAPSEL == 0x1;                          |
| TMR4_CON2  |  4  | 4级捕获信号有效时,计数复位使能  0x0:不使能  0x1:使能                          |
|            |  3  | 3级捕获信号有效时,计数复位使能  0x0:不使能  0x1:使能                          |
|            |  2  | 2级捕获信号有效时,计数复位使能  0x0:不使能  0x1:使能                          |
|            |  1  | 1级捕获信号有效时,计数复位使能  0x0:不使能  0x1:使能                          |
|            |  0  |                                                                               |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CON2
#define _TMR4_CON2
#define TMR4_CAP2_POL(n)            ((n) << 7)  // 3级捕获信号极性  0x0:选择上升沿  0x1:选择下降沿
                                                //                  Note:要选择双沿请配置CAPSEL == 0x1;
#define TMR4_CAP1_POL(n)            ((n) << 6)  // 2级捕获信号极性  0x0:选择上升沿  0x1:选择下降沿
                                                //                  Note:要选择双沿请配置CAPSEL == 0x1;
#define TMR4_CAP0_POL(n)            ((n) << 5)  // 1级捕获信号极性  0x0:选择上升沿  0x1:选择下降沿
                                                //                  Note:要选择双沿请配置CAPSEL == 0x1;
#define TMR4_CTRRST3_EN(n)          ((n) << 4)  // 4级捕获信号有效时,计数复位使能  0x0:不使能  0x1:使能
#define TMR4_CTRRST2_EN(n)          ((n) << 3)  // 3级捕获信号有效时,计数复位使能  0x0:不使能  0x1:使能
#define TMR4_CTRRST1_EN(n)          ((n) << 2)  // 2级捕获信号有效时,计数复位使能  0x0:不使能  0x1:使能
#define TMR4_CTRRST0_EN(n)          ((n) << 1)  // 1级捕获信号有效时,计数复位使能  0x0:不使能  0x1:使能

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
|            | 7:4 |                                                                               |
| TMR4_CON3  | 3:2 | 捕获有效级数  0x0:1级  0x1:2级  0x2:3级  0x3:4级                              |
|            |  1  | PWM输出极性  0x0:正常输出，计数值小于比较值时输出1，大于等于输出0  0x1:取反输出                                       |
|            |  0  | 4级捕获信号极性  0x0:选择上升沿  0x1:选择下降沿                               |
|            |     |                  Note：要选择双沿请配置CAPSEL == 0x1                          |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CON3
#define _TMR4_CON3
#define TMR4_CAP_CLASS(n)           ((n) << 2)  // 捕获有效级数  0x0:1级  0x1:2级  0x2:3级  0x3:4级
#define TMR4_PWM_POL(n)             ((n) << 1)  // PWM输出极性  0x0:正常输出，计数值小于比较值时输出1，大于等于输出0  0x1:取反输出
#define TMR4_CAP3_POL(n)            ((n) << 0)  // 4级捕获信号极性  0x0:选择上升沿  0x1:选择下降沿
                                                //                  Note：要选择双沿请配置CAPSEL == 0x1

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
| TMR4_EN    | 7:1 |                                                                               |
|            |  0  | TIMER4 计数器使能  0x0:不使能  0x1:使能                                       |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_EN
#define _TMR4_EN
#define TMR4_EN(n)                  ((n) << 0)  // TIMER4 计数器使能  0x0:不使能  0x1:使能

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
|            |  7  |                                                                               |
|            |  6  | 计数值等于比较值中断使能      0x0:不使能  0x1:使能                            |
|            |  5  | 计数值等于周期值中断使能      0x0:不使能  0x1:使能                            |
| TMR4_IE0   |  4  | 捕获模式下计数值溢出中断使能  0x0:不使能  0x1:使能                            |
|            |  3  | 4级捕获信号有效中断使能       0x0:不使能  0x1:使能                            |
|            |  2  | 3级捕获信号有效中断使能       0x0:不使能  0x1:使能                            |
|            |  1  | 2级捕获信号有效中断使能       0x0:不使能  0x1:使能                            |
|            |  0  | 1级捕获信号有效中断使能       0x0:不使能  0x1:使能                            |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_IE0
#define _TMR4_IE0

#define TMR4_CMP_IRQ_EN(n)          ((n) << 6)  // 计数值等于比较值中断使能  0x0:不使能  0x1:使能
#define TMR4_PRD_IRQ_EN(n)          ((n) << 5)  // 计数值等于周期值中断使能  0x0:不使能  0x1:使能
#define TMR4_CAPOVF_IRQ_EN(n)       ((n) << 4)  // 捕获模式下计数值溢出中断使能  0x0:不使能  0x1:使能
#define TMR4_CAP3_IRQ_EN(n)         ((n) << 3)  // 4级捕获信号有效中断使能  0x0:不使能  0x1:使能
#define TMR4_CAP2_IRQ_EN(n)         ((n) << 2)  // 3级捕获信号有效中断使能  0x0:不使能  0x1:使能
#define TMR4_CAP1_IRQ_EN(n)         ((n) << 1)  // 2级捕获信号有效中断使能  0x0:不使能  0x1:使能
#define TMR4_CAP0_IRQ_EN(n)         ((n) << 0)  // 1级捕获信号有效中断使能  0x0:不使能  0x1:使能

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
|            |  7  |                                                                               |
|            |  6  | 计数值等于比较值标志清零      写1清零,写0无效                                 |
|            |  5  | 计数值等于周期值标志清零      写1清零,写0无效                                 |
| TMR4_CLR0  |  4  | 捕获模式下计数值溢出标志清零  写1清零,写0无效                                 |
|            |  3  | 4级捕获信号有效标志清零       写1清零,写0无效                                 |
|            |  2  | 3级捕获信号有效标志清零       写1清零,写0无效                                 |
|            |  1  | 2级捕获信号有效标志清零       写1清零,写0无效                                 |
|            |  0  | 1级捕获信号有效标志清零       写1清零,写0无效                                 |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CLR0
#define _TMR4_CLR0

#define TMR4_CMP_FLG_CLR(n)         ((n) << 6)  // 计数值等于比较值标志清零      写1清零,写0无效
#define TMR4_PRD_FLG_CLR(n)         ((n) << 5)  // 计数值等于周期值标志清零      写1清零,写0无效
#define TMR4_CAPOVF_FLG_CLR(n)      ((n) << 4)  // 捕获模式下计数值溢出标志清零  写1清零,写0无效
#define TMR4_CAP3_FLG_CLR(n)        ((n) << 3)  // 4级捕获信号有效标志清零       写1清零,写0无效
#define TMR4_CAP2_FLG_CLR(n)        ((n) << 2)  // 3级捕获信号有效标志清零       写1清零,写0无效
#define TMR4_CAP1_FLG_CLR(n)        ((n) << 1)  // 2级捕获信号有效标志清零       写1清零,写0无效
#define TMR4_CAP0_FLG_CLR(n)        ((n) << 0)  // 1级捕获信号有效标志清零       写1清零,写0无效

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
| TMR4_CNT0  | 7:0 | TIMER4 计数器低8bit初始值                                                     |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CNT0
#define _TMR4_CNT0
#define TMR4_CNT_L(n)               ((n) << 0)  // TIMER4 计数器低8bit初始值

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
| TMR4_CNT1  | 7:0 | TIMER4 计数器高8bit初始值                                                     |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CNT1
#define _TMR4_CNT1
#define TMR4_CNT_H(n)               ((n) << 0)  // TIMER4 计数器高8bit初始值

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
| TMR4_CAP10 | 7:0 | TIMER4 计数周期低8bit设置值,捕获模式下,1级捕获值低8位                         |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CAP10
#define _TMR4_CAP10
#define TMR4_PRD_VAL_L(n)           ((n) << 0)  // TIMER4 计数周期低8bit设置值,捕获模式下,1级捕获值低8位

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
| TMR4_CAP11 | 7:0 | TIMER4 计数周期高8bit设置值,捕获模式下,1级捕获值高8位                         |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CAP11
#define _TMR4_CAP11
#define TMR4_PRD_VAL_H(n)           ((n) << 0)  // TIMER4 计数周期高8bit设置值,捕获模式下,1级捕获值高8位

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
| TMR4_CAP20 | 7:0 | TIMER4 比较值低8bit设置值,捕获模式下,2级捕获值低8位                           |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CAP20
#define _TMR4_CAP20
#define TMR4_PWM_VAL_L(n)           ((n) << 0)  // TIMER4 比较值低8bit设置值,捕获模式下,2级捕获值低8位

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
| TMR4_CAP21 | 7:0 | TIMER4 比较值高8bit设置值,捕获模式下,2级捕获值高8位                           |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CAP21
#define _TMR4_CAP21
#define TMR4_PWM_VAL_H(n)           ((n) << 0)  // TIMER4 比较值高8bit设置值,捕获模式下,2级捕获值高8位

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
| TMR4_CAP30 | 7:0 | TIMER4 计数周期影子寄存器低8bit设置值,捕获模式下,3级捕获值低8位               |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CAP30
#define _TMR4_CAP30
#define TMR4_PRD_SHADOW_L(n)        ((n) << 0)  // TIMER4 计数周期影子寄存器低8bit设置值,捕获模式下,3级捕获值低8位

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
| TMR4_CAP31 | 7:0 | TIMER4 计数周期影子寄存器高8bit设置值,捕获模式下,3级捕获值高8位               |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CAP31
#define _TMR4_CAP31
#define TMR4_PRD_SHADOW_H(n)        ((n) << 0)  // TIMER4 计数周期影子寄存器高8bit设置值,捕获模式下,3级捕获值高8位

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
| TMR4_CAP40 | 7:0 | TIMER4 比较值影子寄存器低8bit设置值,捕获模式下,4级捕获值低8位                 |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CAP40
#define _TMR4_CAP40
#define TMR4_PWM_SHADOW_L(n)        ((n) << 0)  // TIMER4 比较值影子寄存器低8bit设置值,捕获模式下,4级捕获值低8位

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
| TMR4_CAP41 | 7:0 | TIMER4 比较值影子寄存器高8bit设置值,捕获模式下,4级捕获值高8位                 |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_CAP41
#define _TMR4_CAP41
#define TMR4_PWM_SHADOW_H(n)        ((n) << 0)  // TIMER4 比较值影子寄存器高8bit设置值,捕获模式下,4级捕获值高8位

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|            | Bit |                    Description                                                |
|            |-------------------------------------------------------------------------------------|
|            |  7  |                                                                               |
|            |  6  | 计数值等于比较值标志      0x0:没有产生标志  0x1:产生标志                      |
|            |  5  | 计数值等于周期值标志      0x0:没有产生标志  0x1:产生标志                      |
| TMR4_FLAG0 |  4  | 捕获模式下计数值溢出标志  0x0:没有产生标志  0x1:产生标志                      |
|            |  3  | 4级捕获信号有效标志       0x0:没有产生标志  0x1:产生标志                      |
|            |  2  | 3级捕获信号有效标志       0x0:没有产生标志  0x1:产生标志                      |
|            |  1  | 2级捕获信号有效标志       0x0:没有产生标志  0x1:产生标志                      |
|            |  0  | 1级捕获信号有效标志       0x0:没有产生标志  0x1:产生标志                      |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/
// TMR4_FLAG0
#define _TMR4_FLAG0

#define TMR4_CMP_FLAG(n)            ((n) << 6)  // 计数值等于比较值标志      0x0:没有产生标志  0x1:产生标志
#define TMR4_PRD_FLAG(n)            ((n) << 5)  // 计数值等于周期值标志      0x0:没有产生标志  0x1:产生标志
#define TMR4_CAPOVF_FLAG(n)         ((n) << 4)  // 捕获模式下计数值溢出标志  0x0:没有产生标志  0x1:产生标志
#define TMR4_CAP3_FLAG(n)           ((n) << 3)  // 4级捕获信号有效标志       0x0:没有产生标志  0x1:产生标志
#define TMR4_CAP2_FLAG(n)           ((n) << 2)  // 3级捕获信号有效标志       0x0:没有产生标志  0x1:产生标志
#define TMR4_CAP1_FLAG(n)           ((n) << 1)  // 2级捕获信号有效标志       0x0:没有产生标志  0x1:产生标志
#define TMR4_CAP0_FLAG(n)           ((n) << 0)  // 1级捕获信号有效标志       0x0:没有产生标志  0x1:产生标志

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

#ifdef __cplusplus
}
#endif

#endif // __TIMER_H__

/**
  * @}
  */

/**
  * @}
  */

/*************************** (C) COPYRIGHT 2021 HUGE-IC ***** END OF FILE *****/
