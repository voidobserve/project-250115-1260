/**
  ******************************************************************************
  * @file    cmp.h
  * @author  HUGE-IC Application Team
  * @version V1.0.0
  * @date    01-05-2021
  * @brief   This file contains all the CMP LL firmware functions.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2021 HUGE-IC</center></h2>
  *
  *
  */ 
  
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __CMP_H__
#define __CMP_H__

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            | 7:5 | 比较器输出结果产生中断触发方式控制寄存器                             |
|            |     | 0x0:上升沿  0x1:下降沿  0x2:双边沿  0x3:高电平  0x4:低电平           |
| CMP0_CON0/ |  4  |                                                                      |
| CMP1_CON0  |  3  | 比较器结果取反使能  0x0:不使能  0x1:使能                             |
|            |  2  | 比较器的比较结果,只读                                                |
|            |  1  | 中断使能信号  0x0:不使能  0x1:使能                                   |
|            |  0  | 比较器使能信号    0x0:不使能  0x1:使能                               |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CMP0_CON0/CMP1CON0
#define _CMP0_CON0
#define _CMP1_CON0
#define CMP_IRQ_TRG_SEL(n)         ((n) << 5)  // 比较器输出结果产生中断触发方式控制寄存器
                                               // 0x0:上升沿  0x1:下降沿  0x2:双边沿  0x3:高电平  0x4:低电平
#define CMP_OUT_INV_EN(n)          ((n) << 3)  // 比较器结果取反使能  0x0:不使能  0x1:使能
#define CMP_OUT(n)                 ((n) << 2)  // 比较器的比较结果,只读
#define CMP_IRQ_EN(n)              ((n) << 1)  // 中断使能信号  0x0:不使能  0x1:使能
#define CMP_EN(n)                  ((n) << 0)  // 比较器使能信号    0x0:不使能  0x1:使能

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            | 7:6 | 比较器结果选择位  0x0:比较器输出数字滤波器滤波后的结果               |
|            |     | 0x1:比较器输出同步后的结果  0x2:比较器输出迟滞采样结果               |
|            |  5  | 控制比较器结果是否输出控制位                                         |
| CMP0_CON1\ |     | 0x0:不输出,结果保持关闭输出前的值  0x1:输出                          |
| CMP1_CON1  | 4:2 | 比较器正端输入通道选择                                               |
|            |     | CMP0:                                                                |
|            |     |  0x0:CMP_PGA 0x1:CMP0_P<0>(P06) 0x2:CMP0_P<1>(P07) 0x3:CMP0_P<2>(P10)|
|            |     |  0x4:CMP0_P<3>(P03)  0x5:CMP0_P<4>(P23)  0x6:CMP0_P<5>(P26)          |
|            |     |  0x7: VTH_OUT_VCC(VTH_PADEN_VDD=0)/VTH_OUT_PAD(VTH_PADEN_VDD=1)      |
|            |     | CMP1:                                                                |
|            |     |  0x0:CMP_PGA 0x1:CMP1_P<0>(P13) 0x2:CMP1_P<1>(P12) 0x3:CMP1_P<2>(P11)|
|            |     |  0x4:CMP1_P<3>(P02)  0x5:CMP1_P<4>(P23)  0x6:CMP1_P<5>(P26) 0x7: CCS |
|            | 1:0 | 比较器负端输入通道选择                                               |
|            |     | CMP0:                                                                |
|            |     |     0x0:不使能  0x1:CMP0_N<0>/CMP0_N<0>  0x2:CMP0_N<1>  0x3:DAC0_OUT |
|            |     | CMP1:                                                                |
|            |     |     0x0:不使能  0x1:CMP1_N<0>/CMP1_N<0>  0x2:CMP1_N<1>  0x3:DAC1_OUT |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CMP0_CON1\CMP1_CON1
#define _CMP0_CON1
#define _CMP1_CON1
#define CMP_OUT_SEL(n)             ((n) << 6)  // 比较器结果选择位  0x0:比较器输出数字滤波器滤波后的结果
                                               // 0x1:比较器输出同步后的结果  0x2:比较器输出迟滞采样结果
#define CMP_OUT_EN(n)              ((n) << 5)  // 控制比较器结果是否输出控制位
                                               // 0x0:不输出,结果保持关闭输出前的值  0x1:输出
#define CMP_P_SEL(n)               ((n) << 2)  // 比较器正端输入通道选择.
                                               // CMP0:
                                               //  0x0:CMP_PGA 0x1:CMP0_P<0>(P06) 0x2:CMP0_P<1>(P07) 0x3:CMP0_P<2>(P10)
                                               //  0x4:CMP0_P<3>(P03)  0x5:CMP0_P<4>(P23)  0x6:CMP0_P<5>(P26)
                                               //  0x7: VTH_OUT_VCC(VTH_PADEN_VDD=0)/VTH_OUT_PAD(VTH_PADEN_VDD=1)
                                               // CMP1:
                                               //  0x0:CMP_PGA 0x1:CMP1_P<0>(P13) 0x2:CMP1_P<1>(P12) 0x3:CMP1_P<2>(P11)
                                               //  0x4:CMP1_P<3>(P02)  0x5:CMP1_P<4>(P23)  0x6:CMP1_P<5>(P26) 0x7: CCS
#define CMP_N_SEL(n)               ((n) << 0)  // 比较器负端输入通道选择
                                               // 0x0:不使能  0x1:CMP0_N<0>  0x2:CMP0_N<1>  0x3:DAC0_OUT

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
| CMP0_CON2\ |----------------------------------------------------------------------------|
| CMP1_CON2  | 7:0 | 滤波时钟个数设置,最大值256,步长为1微秒
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CMP0_CON2\CMP1_CON2
#define _CMP0_CON2
#define _CMP1_CON2
#define CMP_FILT_NUM(n)            ((n) << 0)  // 滤波时钟个数设置,最大值256,步长为1微秒

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 选择迟滞信号是否经过滤波器                                           |
|            |     | 0x0:经过滤波后的信号  0x1:滤波前的同步信号                           |
| CMP0_CON3\ |  6  | 比较器迟滞功能使能位,通过DAC的两个寄存器控制阈值                     |
| CMP1_CON3  |  5  | 比较器输出控制选择                                                   |
|            |     | 0x0:比较器是否输出由OUTPUT_EN决定  0x1:比较器是否输出由PWM控制       |
|            |  4  | 迟滞计数源选择  0x0:1M时钟  0x1:64K时钟                              |
|            | 3:0 | 迟滞计数器,用来设置迟滞采样间隔,步长为16微秒和1微秒可选              |
|            |     |  0x0:间隔1个周期采样  0x1:间隔2个周期采样  ...  0xF:间隔16个周期采样 |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CMP0_CON3\CMP1_CON3
#define _CMP0_CON3
#define _CMP1_CON3
#define CMP_HY_SEL(n)              ((n) << 7)  // 选择迟滞信号是否经过滤波器
                                               // 0x0:经过滤波后的信号  0x1:滤波前的同步信号
#define CMP_HY_EN(n)               ((n) << 6)  // 比较器迟滞功能使能位,通过DAC的两个寄存器控制阈值
#define CMP_OUT_CTRL(n)            ((n) << 5)  // 比较器输出控制选择
                                               // 0x0:比较器是否输出由OUTPUT_EN决定  0x1:比较器是否输出由PWM控制
#define CMP_HY_SRC_SEL(n)          ((n) << 4)  // 迟滞计数源选择  0x0:1M时钟  0x1:64K时钟 
#define CMP_COUNT_REG(n)           ((n) << 0)  // 迟滞计数器,用来设置迟滞采样间隔,步长为16微秒和1微秒可选
                                               // 0x0:间隔1个周期采样  0x1:间隔2个周期采样  ...  0xF:间隔16个周期采样

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 内部DAC的输出测试使能信号  0x0:关闭  0x1:打开                        |
| CMP0_CON4\ |  6  | N管使能  0x0:打开  0x1: 关闭                                         |
| CMP1_CON4  |  5  | 短路使能 短接比较器正负端,用于比较器校准                             |
|            |     |          0x0:不短接正负端  0x1:短接正负端                            |
|            |  4  | P管使能  0x0:打开  0x1:关闭                                          |
|            | 3:0 | 比较器校正值 芯片上电会自动填入出厂校验值,也可用户填入校验值         |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CMP0_CON4\CMP1_CON4
#define _CMP0_CON4
#define _CMP1_CON4
#define CMP_DAC_TEST_EN(n)         ((n) << 7)  // 内部DAC的输出测试使能信号  0x0:关闭  0x1:打开
#define CMP_NONLY_EN(n)            ((n) << 6)  // N管使能  0x0:打开  0x1:关闭
#define CMP_OSSHORT_WN(n)          ((n) << 5)  // 短路使能 短接比较器正负端,用于比较器校准
                                               //          0x0:不短接正负端  0x1:短接正负端
#define CMP_PONLY_EN(n)            ((n) << 4)  // P管使能  0x0:打开  0x1:关闭
#define CMP_TRIM(n)                ((n) << 0)  // 比较器校正值 芯片上电会自动填入出厂校验值,也可用户填入校验值

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 短路保护阈值(VCC-0.08/0.2/0.32/0.48)输入使能信号  0x0:不使能 0x1:使能|
|            |  6  | 短路保护阈值(PAD-0.08/0.2/0.32/0.48)输入使能信号  0x0:不使能 0x1:使能|
| CMP0_CON5  | 5:4 | 比较器内置阈值选择                                                   |
|            |     | 0x0:VCC(PAD)-80mv  0x1:VCC(PAD)-200mv                                |
|            |     | 0x2:VCC(PAD)-320mv  0x3:VCC(PAD)-480mv                               |
|            |  3  | 比较器的参考电压参考电流使能信号  0x0:不使能  0x1:使能               |
|            |  2  | DAC0的输入参考电压选择信号                                           |
|            |     | 0x0:选择内部1.2V作为参考电压  0x1:选择内部VCCA作为参考电压           |
|            | 1:0 |                                                                      |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CMP0_CON5
#define _CMP0_CON5
#define CMP_VTH_VCC_EN(n)          ((n) << 7)  // 短路保护阈值(VCC-0.08/0.2/0.32/0.48)输入使能信号  0x0:不使能 0x1:使能
#define CMP_VTH_PAD_EN(n)          ((n) << 6)  // 短路保护阈值(PAD-0.08/0.2/0.32/0.48)输入使能信号  0x0:不使能 0x1:使能
#define CMP_VTH_VAL_SEL(n)         ((n) << 4)  // 比较器内置阈值选择
                                               // 0x0:VCC(PAD)-80mv  0x1:VCC(PAD)-200mv
                                               // 0x2:VCC(PAD)-320mv  0x3:VCC(PAD)-480mv
#define CMP_DAC1_VREF_EN(n)        ((n) << 3)  // 比较器的参考电压参考电流使能信号  0x0:不使能  0x1:使能
#define CMP_DAC0_VREF_SEL(n)       ((n) << 2)  // DAC0的输入参考电压选择信号
                                               // 0x0:选择内部1.2V作为参考电压  0x1:选择内部VCCA作为参考电压

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 比较器的参考电压参考电流使能信号  0x0:不使能  0x1:使能               |
|  CMP_CON   |  6  | 恒流源的使能信号  0x0:不使能  0x1:使能                               |
|            | 5:0 | 恒流源电流调节信号(step=2.5%)  0x00:11.8mA  0x0F:20mA  0x1F:28.4mA   |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CMP_CON
#define _CMP_CON
#define CMP_REF_EN(n)              ((n) << 7)  // 比较器的参考电压参考电流使能信号  0x0:不使能  0x1:使能
#define CMP_CCS_EN(n)              ((n) << 6)  // 恒流源的使能信号  0x0:不使能  0x1:使能
#define CMP_TRIMIB(n)              ((n) << 0)  // 恒流源电流调节信号(step=2.5%)  0x00:11.8mA  0x0F:20mA  0x1F:28.4mA

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
| CMP0_DAC0\ |----------------------------------------------------------------------------|
| CMP1_DAC0  | 7:0 | 比较器的DAC0寄存器                                                   |
|            |     | 如果不开启数字迟滞,本寄存器即为比较器0内置DAC的输入,如果开启数字迟   |
|            |     | 滞,DAC的输入值在CMP0_DAC0和CMP0_DAC1之间选择,当比较输出为1时选择     |
|            |     | CMP0_DAC0,当比较器输出为0时选择CMP0_DAC1                             |
|            |     | 1) DAC0为0x00~0xF0时: DAC电压值=(参考源/0xF0)*DAC0                   |
|            |     | 2) DAC0为0xF0~0xFF时: DAC电压值=参考源                               |
|            |     | CMP0_CON5[2]选择DAC的参考源,可选内部1.2V、内部VCCA                   |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CMP0_DAC0\CMP1_DAC0
#define _CMP0_DAC0
#define _CMP1_DAC0
#define CMP_DAC0_VAL(n)            ((n) << 0)  // 比较器的DAC0寄存器

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
| CMP0_DAC1\ |----------------------------------------------------------------------------|
| CMP1_DAC1  | 7:0 | 比较器的DAC1寄存器,使能数字迟滞时生效                                |
|            |     | 1) DAC0为0x00~0xF0时: DAC电压值=(参考源/0xF0)*DAC0                   |
|            |     | 2) DAC0为0xF0~0xFF时: DAC电压值=参考源                               |
|            |     | CMP0_CON5[2]选择DAC的参考源,可选内部1.2V、内部VCCA                   |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CMP0_DAC1\CMP1_DAC1
#define _CMP0_DAC1
#define _CMP1_DAC1
#define CMP_DAC1_VAL(n)            ((n) << 0)  // 比较器的DAC1寄存器,使能数字迟滞时生效
                                               // 1) DAC0为0x00~0xF0时: DAC电压值=(参考源/0xF0)*DAC0
                                               // 2) DAC0为0xF0~0xFF时: DAC电压值=参考源
                                               // CMP0_CON5[2]选择DAC的参考源,可选内部1.2V、内部VCCA

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 比较器1数字信号wakeup使能  0x0:不使能  0x1:使能                      |
|            |  6  | 比较器0数字信号wakeup使能  0x0:不使能  0x1:使能                      |
|  CMP_STA   |  5  | 比较器1模拟WAKEUP取反功能使能  0x0:不使能  0x1:使能                  |
|            |  4  | 比较器0模拟WAKEUP取反功能使能  0x0:不使能  0x1:使能                  |
|            |  3  | 比较器1模拟信号WAKEUP使能  0x0:不使能  0x1:使能                      |
|            |  2  | 比较器0模拟信号WAKEUP使能  0x0:不使能  0x1:使能                      |
|            |  1  | 比较器1中断标志位,写1清零                                            |
|            |  0  | 比较器0中断标志位,写1清零                                            |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CMP_STA
#define _CMP_STA
#define CMP1_WKUP_EN(n)           ((n) << 7)  // 比较器1数字信号wakeup使能  0x0:不使能  0x1:使能
#define CMP0_WKUP_EN(n)           ((n) << 6)  // 比较器0数字信号wakeup使能  0x0:不使能  0x1:使能
#define CMP1_ANA_INV_EN(n)        ((n) << 5)  // 比较器1模拟WAKEUP取反功能使能  0x0:不使能  0x1:使能
#define CMP0_ANA_INV_EN(n)        ((n) << 4)  // 比较器0模拟WAKEUP取反功能使能  0x0:不使能  0x1:使能
#define CMP1_ANA_WKUP(n)          ((n) << 3)  // 比较器1模拟信号WAKEUP使能  0x0:不使能  0x1:使能
#define CMP0_ANA_WKUP(n)          ((n) << 2)  // 比较器0模拟信号WAKEUP使能  0x0:不使能  0x1:使能
#define CMP1_IRQ_FLAG(n)          ((n) << 1)  // 比较器1中断标志位,写1清零
#define CMP0_IRQ_FLAG(n)          ((n) << 0)  // 比较器0中断标志位,写1清零

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            | 7:6 | 比较器0的输入正负迟滞选择信号                                        |
|            |     | 0x0:disable迟滞输出  0x1:正迟滞输出  0x2:负迟滞输出  0x3:正负迟滞输出|
| CMP_HYCON  | 5:4 | 比较器0的迟滞电压选择  0x0:0mv  0x1:10mv  0x2:20mv  0x3:60mv         |
|            |     | Note:CMP1_HYSPNS_VDD=0x0的时候, CMP0_HYSVTH_VDD必须选择等于0x0       |
|            | 3:2 | 比较器1的输入正负迟滞选择信号                                        |
|            |     | 0x0:disable迟滞输出  0x1:正迟滞输出  0x2:负迟滞输出  0x3:正负迟滞输出|
|            | 1:0 | 比较器1的迟滞电压选择                                                |
|            |     | 0x0:0mv  0x1:10mv  0x2:20mv  0x3:60mv                                |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CMP_HYCON
#define _CMP_HYCON
#define CMP0_HYSPNS_VDD(n)          ((n) << 6)  // 比较器0的输入正负迟滞选择信号
                                                // 0x0:disable迟滞输出  0x1:正迟滞输出  0x2:负迟滞输出  0x3:正负迟滞输出
#define CMP0_HYSVTH_VDD(n)          ((n) << 4)  // 比较器0的迟滞电压选择  0x0:0mv  0x1:10mv  0x2:20mv  0x3:60mv
                                                // Note:CMP1_HYSPNS_VDD=0x0的时候, CMP0_HYSVTH_VDD必须选择等于0x0
#define CMP1_HYSPNS_VDD(n)          ((n) << 2)  // 比较器1的输入正负迟滞选择信号
                                                // 0x0:disable迟滞输出  0x1:正迟滞输出  0x2:负迟滞输出  0x3:正负迟滞输出
#define CMP1_HYSVTH_VDD(n)          ((n) << 0)  // 比较器1的迟滞电压选择
                                                // 0x0:0mv  0x1:10mv  0x2:20mv  0x3:60mv

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

#ifdef __cplusplus
}
#endif

#endif // __CMP_H__

/**
  * @}
  */

/**
  * @}
  */

/*************************** (C) COPYRIGHT 2021 HUGE-IC ***** END OF FILE *****/
