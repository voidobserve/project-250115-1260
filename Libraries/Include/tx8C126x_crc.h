/**
  ******************************************************************************
  * @file    crc.h
  * @author  HUGE-IC Application Team
  * @version V1.0.0
  * @date    01-05-2021
  * @brief   This file contains all the CRC LL firmware functions.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2021 HUGE-IC</center></h2>
  *
  *
  */ 
  
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __CRC_H__
#define __CRC_H__

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/

/**********************************************************************
|---------------------------------------------------------------------|
|          | Bit |                    Description                     |
|          |----------------------------------------------------------|
|          | 7:1 |                                                    |
| CRC_CON  |  0  | 选择使用CRC32还是CRC8的功能,CRC8只需要读取一次结果,|
|          |     | CRC32需要读取4次结果,把结果拼成一个32bitCRC结果    |
|          |     | 0x0:使用CRC8  0x1:使用CRC32                        |
|---------------------------------------------------------------------|
**********************************************************************/
// CRC_CON
#define _CRC_CON
#define CRC_MODE_SEL(n)           ((n) << 0)  // 0x0:使用CRC8  0x1:使用CRC32

/**********************************************************************
|---------------------------------------------------------------------|
|          | Bit |                    Description                     |
|          |----------------------------------------------------------|
| CRC_REG  | 7:0 | 每次使用前需要先设置初始值设置CRC校验的初始值，默认|
|          |     | 上电的CRC32的初始值为0xffffffff,CRC8的初始值为0xff |
|          |     | Note:使用CRC32模式时,复位初始值需要写4次CRC_REG寄存|
|          |     |    器,CRC8模式时,复位初始值只需要写1次CRC_REG寄存器|
|---------------------------------------------------------------------|
**********************************************************************/
// CRC_REG
#define _CRC_REG
#define CRC_INIT_SET(n)           ((n) << 0)  // 设置CRC校验的初始值

/**********************************************************************
|---------------------------------------------------------------------|
|          | Bit |                    Description                     |
|          |----------------------------------------------------------|
| CRC_FIFO | 7:0 | 写入每次需要计算的1byte数据                        |
|---------------------------------------------------------------------|
**********************************************************************/
// CRC_FIFO
#define _CRC_FIFO
#define CRC_WRITE_DATA(n)         ((n) << 0)  // 写入每次需要计算的1byte数据

/**********************************************************************
|---------------------------------------------------------------------|
|          | Bit |                    Description                     |
|          |----------------------------------------------------------|
| CRC_DATA0| 7:0 | CRC32的结果的0-7bit/CRC8结果                       |
|---------------------------------------------------------------------|
**********************************************************************/
// CRC_DATA0
#define _CRC_DATA0
#define CRC_DATA0(n)              ((n) << 0)  // CRC32的结果的0-7bit/CRC8结果

/**********************************************************************
|---------------------------------------------------------------------|
|          | Bit |                    Description                     |
|          |----------------------------------------------------------|
| CRC_DATA1| 7:0 | CRC32的结果的8-15bit                               |
|---------------------------------------------------------------------|
**********************************************************************/
// CRC_DATA1
#define _CRC_DATA1
#define CRC_DATA1(n)              ((n) << 0)  // CRC32的结果的8-15bit

/**********************************************************************
|---------------------------------------------------------------------|
|          | Bit |                    Description                     |
|          |----------------------------------------------------------|
| CRC_DATA2| 7:0 | CRC32的结果的16-23bit                              |
|---------------------------------------------------------------------|
**********************************************************************/
// CRC_DATA2
#define _CRC_DATA2
#define CRC_DATA2(n)              ((n) << 0)  // CRC32的结果的16-23bit

/**********************************************************************
|---------------------------------------------------------------------|
|          | Bit |                    Description                     |
|          |----------------------------------------------------------|
| CRC_DATA3| 7:0 | CRC32的结果的24-31bit                              |
|---------------------------------------------------------------------|
**********************************************************************/
// CRC_DATA3
#define _CRC_DATA3
#define CRC_DATA3(n)              ((n) << 0)  // CRC32的结果的24-31bit

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

#ifdef __cplusplus
}
#endif

#endif // __CRC_H__

/**
  * @}
  */

/**
  * @}
  */

/*************************** (C) COPYRIGHT 2021 HUGE-IC ***** END OF FILE *****/
