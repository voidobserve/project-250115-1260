/**
  ******************************************************************************
  * @file    system_reg.h
  * @author  HUGE-IC Application Team
  * @version V1.0.0
  * @date    01-05-2021
  * @brief   This file contains all the SYSTEM LL firmware functions.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2021 HUGE-IC</center></h2>
  *
  *
  */ 
  
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __SYSTEM_REG_H__
#define __SYSTEM_REG_H__

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/

/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|                                            SYS                                                   |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 高级Timer0软复位  0x0:软复位  0x1:软复位释放                         |
|            |  6  | 基本Timer2软复位  0x0:软复位  0x1:软复位释放                         |
|            |  5  | 基本Timer1软复位  0x0:软复位  0x1:软复位释放                         |
|  SYS_CON0  |  4  | 基本Timer0软复位  0x0:软复位  0x1:软复位释放                         |
|            |  3  | I2C软复位         0x0:软复位  0x1:软复位释放                         |
|            |  2  | SPI0软复位        0x0:软复位  0x1:软复位释放                         |
|            |  1  | UART1软复位       0x0:软复位  0x1:软复位释放                         |
|            |  0  | UART0软复位       0x0:软复位  0x1:软复位释放                         |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// SYS_CON0
#define _SYS_CON0
#define SYS_STMR0_SOFT_RST(n)      ((n) << 7)  // 高级Timer0软复位  0x0:软复位  0x1:软复位释放
#define SYS_TMR2_SOFT_RST(n)       ((n) << 6)  // 基本Timer2软复位  0x0:软复位  0x1:软复位释放
#define SYS_TMR1_SOFT_RST(n)       ((n) << 5)  // 基本Timer1软复位  0x0:软复位  0x1:软复位释放
#define SYS_TMR0_SOFT_RST(n)       ((n) << 4)  // 基本Timer0软复位  0x0:软复位  0x1:软复位释放
#define SYS_I2C_SOFT_RST(n)        ((n) << 3)  // I2C软复位         0x0:软复位  0x1:软复位释放
#define SYS_SPI0_SOFT_RST(n)       ((n) << 2)  // SPI0软复位        0x0:软复位  0x1:软复位释放
#define SYS_UART1_SOFT_RST(n)      ((n) << 1)  // UART1软复位       0x0:软复位  0x1:软复位释放
#define SYS_UART0_SOFT_RST(n)      ((n) << 0)  // UART0软复位       0x0:软复位  0x1:软复位释放

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | GPIO Debounce模块软复位  0x0:软复位  0x1:软复位释放                  |
|            |  6  | TouchKey模块软复位       0x0:软复位  0x1:软复位释放                  |
|            |  5  | GPIO模块软复位           0x0:软复位  0x1:软复位释放                  |
|  SYS_CON1  |  4  | ADC软复位                0x0:软复位  0x1:软复位释放                  |
|            |  3  | Watchdog软复位           0x0:软复位  0x1:软复位释放                  |
|            |  2  | CRC软复位                0x0:软复位  0x1:软复位释放                  |
|            |  1  | 高级Timer2软复位         0x0:软复位  0x1:软复位释放                  |
|            |  0  | 高级Timer1软复位         0x0:软复位  0x1:软复位释放                  |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// SYS_CON1
#define _SYS_CON1
#define SYS_IODB_SOFT_RST(n)       ((n) << 7)  // GPIO Debounce模块软复位  0x0:软复位  0x1:软复位释放
#define SYS_TK_SOFT_RST(n)         ((n) << 6)  // TouchKey模块软复位       0x0:软复位  0x1:软复位释放
#define SYS_GPIO_SOFT_RST(n)       ((n) << 5)  // GPIO模块软复位           0x0:软复位  0x1:软复位释放
#define SYS_ADC_SOFT_RST(n)        ((n) << 4)  // ADC软复位                0x0:软复位  0x1:软复位释放
#define SYS_WDT_SOFT_RST(n)        ((n) << 3)  // Watchdog软复位           0x0:软复位  0x1:软复位释放
#define SYS_CRC_SOFT_RST(n)        ((n) << 2)  // CRC软复位                0x0:软复位  0x1:软复位释放
#define SYS_STMR2_SOFT_RST(n)      ((n) << 1)  // 高级Timer2软复位         0x0:软复位  0x1:软复位释放
#define SYS_STMR1_SOFT_RST(n)      ((n) << 0)  // 高级Timer1软复位         0x0:软复位  0x1:软复位释放

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | Timer4捕获rc64k_div8使能位  0x0:关闭  0x1:打开                       |
|            |  6  | XOSC 硬件使能功能选择位     0x0:关闭  0x1:打开                       |
|            |  5  | 基本Timer2与Timer4联合完成红外发送功能使能位  0x0:关闭  0x1:打开     |
|            |     | Note:基本Timer2作为载波PWM,Timer4通道A作为调制波PWM                  |
|  SYS_CON2  |  4  | LVDVCC 唤醒使能位          0x0:关闭  0x1:打开                        |
|            |  3  | ISP IO 输入滤波功能使能位  0x0:关闭  0x1:打开                        |
|            |  2  |                                                                      |
|            |  1  |                                                                      |
|            |  0  | MDU模块软复位  0x0:软复位  0x1:软复位释放                            |
|            |----------------------------------------------------------------------------|
|            |     | Note:SYS_CON2寄存器中保留位用于特殊测试功能,用户程序不能随意写操作,  |
|            |     |      可能会带来系统风险!                                             |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// SYS_CON2
#define _SYS_CON2
#define SYS_TMR4_CAP_RC_EN(n)      ((n) << 7)  // Timer4捕获rc64k_div8使能位  0x0:关闭  0x1:打开
#define SYS_XOSC_HWEN_SEL(n)       ((n) << 6)  // XOSC 硬件使能功能选择位     0x0:关闭  0x1:打开
#define SYS_TMR24_IR_EN(n)         ((n) << 5)  // 基本Timer2与Timer4联合完成红外发送功能使能位  0x0:关闭  0x1:打开
                                               // Note:基本Timer2作为载波PWM,Timer4通道A作为调制波PWM
#define SYS_LVD_VCC_WK_EN(n)       ((n) << 4)  // LVDVCC 唤醒使能位          0x0:关闭  0x1:打开
#define SYS_ISP_IO_DEB_EN(n)       ((n) << 3)  // ISP IO 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_MDU_SOFT_RST(n)        ((n) << 0)  // MDU模块软复位  0x0:软复位  0x1:软复位释放

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | P07 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  6  | P06 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  5  | P05 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|  SYS_CON3  |  4  | P04 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  3  | P03 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  2  | P02 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  1  | P01 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  0  | P00 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// SYS_CON3
#define _SYS_CON3
#define SYS_P07_DBS_EN(n)          ((n) << 7)  // P07 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P06_DBS_EN(n)          ((n) << 6)  // P06 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P05_DBS_EN(n)          ((n) << 5)  // P05 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P04_DBS_EN(n)          ((n) << 4)  // P04 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P03_DBS_EN(n)          ((n) << 3)  // P03 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P02_DBS_EN(n)          ((n) << 2)  // P02 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P01_DBS_EN(n)          ((n) << 1)  // P01 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P00_DBS_EN(n)          ((n) << 0)  // P00 输入滤波功能使能位  0x0:关闭  0x1:打开

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | P17 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  6  | P16 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  5  | P15 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|  SYS_CON4  |  4  | P14 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  3  | P13 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  2  | P12 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  1  | P11 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  0  | P10 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// SYS_CON4
#define _SYS_CON4
#define SYS_P17_DBS_EN(n)          ((n) << 7)  // P17 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P16_DBS_EN(n)          ((n) << 6)  // P16 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P15_DBS_EN(n)          ((n) << 5)  // P15 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P14_DBS_EN(n)          ((n) << 4)  // P14 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P13_DBS_EN(n)          ((n) << 3)  // P13 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P12_DBS_EN(n)          ((n) << 2)  // P12 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P11_DBS_EN(n)          ((n) << 1)  // P11 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P10_DBS_EN(n)          ((n) << 0)  // P10 输入滤波功能使能位  0x0:关闭  0x1:打开

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | P27 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  6  | P26 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  5  | P25 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|  SYS_CON5  |  4  | P24 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  3  | P23 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  2  | P22 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  1  | P21 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  0  | P20 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// SYS_CON5
#define _SYS_CON5
#define SYS_P27_DBS_EN(n)          ((n) << 7)  // P27 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P26_DBS_EN(n)          ((n) << 6)  // P26 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P25_DBS_EN(n)          ((n) << 5)  // P25 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P24_DBS_EN(n)          ((n) << 4)  // P24 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P23_DBS_EN(n)          ((n) << 3)  // P23 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P22_DBS_EN(n)          ((n) << 2)  // P22 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P21_DBS_EN(n)          ((n) << 1)  // P21 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P20_DBS_EN(n)          ((n) << 0)  // P20 输入滤波功能使能位  0x0:关闭  0x1:打开

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            | 7:4 | 片上SRAM 动态电压调整值                                              |
|            |     | Note:用户千万不要配置该寄存器,否则会导致芯片不确定行为!!!            |
|            | 3:2 | 低功耗Sleep Mode流程进入关闭程序存储器供电的延迟时间配置             |
|  SYS_CON6  |     | 0x0:1个系统周期  0x1:2个系统周期                                     |
|            |     | 0x2:3个系统周期  0x3:4个系统周期(推荐配置)                           |
|            |     | Note:低功耗模式进入之前必须将系统时钟切换成低速的64KHz的RC,          |
|            |     |      所以延迟时间=n*T64k                                             |
|            |  1  | P31 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|            |  0  | P30 输入滤波功能使能位  0x0:关闭  0x1:打开                           |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// SYS_CON6
#define _SYS_CON6
#define SYS_MEDVS(n)               ((n) << 4)  // 片上SRAM 动态电压调整值
                                               // Note:用户千万不要配置该寄存器,否则会导致芯片不确定行为!!!
#define SYS_MPDN_CNT(n)            ((n) << 2)  // 低功耗Sleep Mode流程进入关闭程序存储器供电的延迟时间配置
                                               // 0x0:1个系统周期  0x1:2个系统周期
                                               // 0x2:3个系统周期  0x3:4个系统周期(推荐配置)
                                               // Note:低功耗模式进入之前必须将系统时钟切换成低速的64KHz的RC,
                                               //      所以延迟时间=n*T64k
#define SYS_P31_DBS_EN(n)          ((n) << 1)  // P31 输入滤波功能使能位  0x0:关闭  0x1:打开
#define SYS_P30_DBS_EN(n)          ((n) << 0)  // P30 输入滤波功能使能位  0x0:关闭  0x1:打开

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            | 7:6 | 低功耗Sleep Mode流程退出低功耗LDO延迟的时间配置                      |
|            |     | 0x0:1个系统周期  0x1:2个系统周期                                     |
|            |     | 0x2:3个系统周期  0x3:4个系统周期(推荐配置)                           |
|            |     | Note:低功耗模式进入之前必须将系统时钟切换成低速的64KHz的RC,          |
|            |     |      所以延迟时间=n*T64k                                             |
|            | 5:4 | 低功耗Sleep Mode流程退出低功耗流程中打开程序存储器供电的延迟时间配置 |
|  SYS_CON7  |     | 0x0:1个系统周期  0x1:2个系统周期                                     |
|            |     | 0x2:3个系统周期  0x3:4个系统周期(推荐配置)                           |
|            |     | Note:低功耗模式进入之前必须将系统时钟切换成低速的64KHz的RC,          |
|            |     |      所以延迟时间=n*T64k                                             |
|            | 3:2 | 低功耗Sleep Mode流程打开主LDO延迟时间配置.                           |
|            |     | 0x0:1个系统周期  0x1:2个系统周期                                     |
|            |     | 0x2:3个系统周期  0x3:4个系统周期(推荐配置)                           |
|            |     | Note:低功耗模式进入之前必须将系统时钟切换成低速的64KHz的RC,          |
|            |     |      所以延迟时间=n*T64k                                             |
|            | 1:0 | 低功耗Sleep Mode流程关闭主LDO延迟时间配置.                           |
|            |     | 0x0:1个系统周期  0x1:2个系统周期                                     |
|            |     | 0x2:3个系统周期  0x3:4个系统周期(推荐配置)                           |
|            |     | Note:低功耗模式进入之前必须将系统时钟切换成低速的64KHz的RC,          |
|            |     |      所以延迟时间=n*T64k                                             |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// SYS_CON7
#define _SYS_CON7
#define SYS_EXT_SLP_CNT(n)         ((n) << 6)  // 低功耗Sleep Mode流程退出低功耗LDO延迟的时间配置
                                               // 0x0:1个系统周期  0x1:2个系统周期
                                               // 0x2:3个系统周期  0x3:4个系统周期(推荐配置)
                                               // Note:低功耗模式进入之前必须将系统时钟切换成低速的64KHz的RC,
                                               //      所以延迟时间=n*T64k
#define SYS_MTPUP_CNT(n)           ((n) << 4)  // 低功耗Sleep Mode流程退出低功耗流程中打开程序存储器供电的延迟时间配置
                                               // 0x0:1个系统周期  0x1:2个系统周期
                                               // 0x2:3个系统周期  0x3:4个系统周期(推荐配置)
                                               // Note:低功耗模式进入之前必须将系统时钟切换成低速的64KHz的RC,
                                               //      所以延迟时间=n*T64k
#define SYS_OPM_LDO_CNT(n)         ((n) << 2)  // 低功耗Sleep Mode流程打开主LDO延迟时间配置.
                                               // 0x0:1个系统周期  0x1:2个系统周期
                                               // 0x2:3个系统周期  0x3:4个系统周期(推荐配置)
                                               // Note:低功耗模式进入之前必须将系统时钟切换成低速的64KHz的RC,
                                               //      所以延迟时间=n*T64k
#define SYS_CLSM_LDO_CNT(n)        ((n) << 0)  // 低功耗Sleep Mode流程关闭主LDO延迟时间配置.
                                               // 0x0:1个系统周期  0x1:2个系统周期
                                               // 0x2:3个系统周期  0x3:4个系统周期(推荐配置)
                                               // Note:低功耗模式进入之前必须将系统时钟切换成低速的64KHz的RC,
                                               //      所以延迟时间=n*T64k

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 低功耗sleep mode一键关模拟模块功能使能位  0x0:关闭  0x1:打开         |
|            |     | Note:通过一键关闭模拟模块,可以节省进入低功耗sleep模式前的程序代码,   |
|            |     |      简化关闭模拟模块的流程  一键关闭模拟模块包括:包括触摸按键,      |
|            |     |      运放,比较器,ADC                                                 |
|            |  6  | 片上SRAM 动态电压调整使能位                                          |
|            |     | Note:用户千万不要配置该寄存器,否则会导致芯片不确定行为!!!            |
|  SYS_CON8  |  5  | 快速复位唤醒Sleep Mode使能  0x0:关闭  0x1:打开                       |
|            |     | Note:配置此功能主要是为了能在sleep 低功耗模式下,                     |
|            |     |     设置通过复位唤醒sleep时,可以节省复位时间                         |
|            |  4  | SPI0 io map2的使能位  0x0:关闭  0x1:打开                             |
|            |  3  | SPI0 io map1的使能位  0x0:关闭  0x1:打开                             |
|            |  2  | DEBUG功能使能位       0x0:关闭  0x1:打开                             |
|            | 1:0 | PMU 保留寄存器的位5:4的值                                            |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// SYS_CON8
#define _SYS_CON8
#define SYS_LPSLP_DIS_ANA(n)       ((n) << 7)  // 低功耗sleep mode一键关模拟模块功能使能位  0x0:关闭  0x1:打开
                                               // Note:通过一键关闭模拟模块,可以节省进入低功耗sleep模式前的程序代码,
                                               //      简化关闭模拟模块的流程  一键关闭模拟模块包括:包括触摸按键,
                                               //      运放,比较器,ADC
#define SYS_MEMDVSE(n)             ((n) << 6)  // 片上SRAM 动态电压调整使能位
                                               // Note:用户千万不要配置该寄存器,否则会导致芯片不确定行为!!!
#define SYS_FAST_RST_EN(n)         ((n) << 5)  // 快速复位唤醒Sleep Mode使能  0x0:关闭  0x1:打开
                                               // Note:配置此功能主要是为了能在sleep 低功耗模式下,
                                               //     设置通过复位唤醒sleep时,可以节省复位时间
#define SYS_SPI0_MAP2_EN(n)        ((n) << 4)  // SPI0 io map2的使能位  0x0:关闭  0x1:打开
#define SYS_SPI0_MAP1_EN(n)        ((n) << 3)  // SPI0 io map1的使能位  0x0:关闭  0x1:打开
#define SYS_DBG_EN(n)              ((n) << 2)  // DEBUG功能使能位       0x0:关闭  0x1:打开
#define SYS_PMU_REV54(n)           ((n) << 0)  // PMU 保留寄存器的位5:4的值

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  |                                                                      |
|            |  6  | 写1清掉系统软复位1标志位                                             |
|  SYS_PND   |  5  | 写1清掉系统sleep标志位                                               |
|            |  4  | 写1清掉系统软复位标志位                                              |
|            |  3  |                                                                      |
|            |  2  | 系统软复位1标志位  写1系统软复位。                                   |
|            |  1  | 系统sleep标志位                                                      |
|            |  0  | 系统软复位标志位  写1系统软复位。                                    |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// SYS_PND
#define _SYS_PND
#define SYS_FT_RST1_CLR(n)         ((n) << 6)  // 写1清掉系统软复位1标志位
#define SYS_LP_STA_CLR(n)          ((n) << 5)  // 写1清掉系统sleep标志位
#define SYS_FTR_ST_CLR(n)          ((n) << 4)  // 写1清掉系统软复位标志位
#define SYS_FTR_ST1_PND(n)         ((n) << 2)  // 系统软复位1标志位  写1系统软复位。
#define SYS_LP_PND(n)              ((n) << 1)  // 系统sleep标志位
#define SYS_FTR_ST_PND(n)          ((n) << 0)  // 系统软复位标志位  写1系统软复位。



/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|                                            CLK                                                   |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  |                                                                      |
|            |  6  | 比较器滤波时钟选择位  0x0:选择eflash_clk  0x1:选择sys_clk            |
|            | 5:4 | P0 滤波时钟选择位                                                    |
|  CLK_CON0  |     | 0x0:选择hirc_div_clk  0x1:选择xoscm  0x2:选择sys_clk  0x3:选择rc64k  |
|            | 3:2 | IO 输出时钟源选择位                                                  |
|            |     | 0x0:选择sys_clk  0x1:选择hirc_div_clk  0x2:选择lirc  0x3:选择xoscm   |
|            | 1:0 | 系统时钟选择位                                                       |
|            |     | 0x0:选择rc64k  0x1:选择xoscm  0x2:选择hirc_div_clk  0x3:选择hirc_clk |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_CON0
#define _CLK_CON0
#define CLK_CMP_DBS_SEL(n)         ((n) << 6)  // 比较器滤波时钟选择位  0x0:选择eflash_clk  0x1:选择sys_clk
#define CLK_P0_DBS_SEL(n)          ((n) << 4)  // P0 滤波时钟选择位
                                               // 0x0:选择hirc_div_clk  0x1:选择xoscm  0x2:选择sys_clk  0x3:选择rc64k
#define CLK_TOIO_SEL(n)            ((n) << 2)  // IO 输出时钟源选择位
                                               // 0x0:选择sys_clk  0x1:选择hirc_div_clk  0x2:选择lirc  0x3:选择xoscm
#define CLK_SYSCLK_SEL(n)          ((n) << 0)  // 系统时钟选择位
                                               // 0x0:选择rc64k  0x1:选择xoscm  0x2:选择hirc_div_clk  0x3:选择hirc_clk

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            | 7:6 | P1 滤波时钟选择位.                                                   |
|            |     | 0x0:选择hirc_div_clk  0x1:选择xoscm  0x2:选择sys_clk  0x3:选择rc64k  |
|            | 5:3 | 高速HRCOSC时钟源分频设置.                                            |
|  CLK_CON1  |     | 0x0:不分频  0x1:2分频  0x2:3分频  ......  0x6:7分频  0x7:关闭        |
|            |     | Note:配置比为n+1时钟                                                 |
|            | 2:0 | IO输出时钟源分频设置.                                                |
|            |     | 0x0:不分频  0x1:2分频  0x2:3分频  ......  0x6:7分频  0x7:关闭        |
|            |     | Note:配置比为n+1时钟                                                 |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_CON1
#define _CLK_CON1
#define CLK_P1_DBS_SEL(n)          ((n) << 6)  // P1 滤波时钟选择位.
                                               // 0x0:选择hirc_div_clk  0x1:选择xoscm  0x2:选择sys_clk  0x3:选择rc64k
#define CLK_HIRC_DIV(n)            ((n) << 3)  // 高速HRCOSC时钟源分频设置.
                                               // 0x0:不分频  0x1:2分频  0x2:3分频  ......  0x6:7分频  0x7:关闭
                                               // Note:配置比为n+1时钟
#define CLK_TOIO_DIV(n)            ((n) << 0)  // IO输出时钟源分频设置.
                                               // 0x0:不分频  0x1:2分频  0x2:3分频  ......  0x6:7分频  0x7:关闭
                                               // Note:配置比为n+1时钟

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  |                                                                      |
|            |  6  | MDU模块时钟使能位  0x0:关闭时钟  0x1:打开时钟                        |
|            |  5  | Adc clk时钟选择位  0x0:选择adc_clk_pre  0x1:选择adc_clk_pre_inv      |
|  CLK_CON2  |  4  | LED clk时钟使能位  0x0:关闭时钟  0x1:打开时钟                        |
|            | 2:0 | 系统时钟分频设置                                                     |
|            |     | 0x0:不分频  0x1:2分频  0x2:3分频  ......  0xE:15分频  0xF:关闭       |
|            |     | Note:配置比为n+1时钟                                                 |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_CON2
#define _CLK_CON2
#define CLK_MDU_EN(n)              ((n) << 6)  // MDU模块时钟使能位  0x0:关闭时钟  0x1:打开时钟
#define CLK_ADC_SEL(n)             ((n) << 5)  // Adc clk时钟选择位  0x0:选择adc_clk_pre  0x1:选择adc_clk_pre_inv
#define CLK_LED_EN(n)              ((n) << 4)  // LED clk时钟使能位  0x0:关闭时钟  0x1:打开时钟
#define CLK_SYS_DIV(n)             ((n) << 0)  // 系统时钟分频设置
                                               // 0x0:不分频  0x1:2分频  0x2:3分频  ......  0xE:15分频  0xF:关闭
                                               // Note:配置比为n+1时钟

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 基本Timer2模块时钟使能位  0x0:关闭时钟  0x1:打开时钟                 |
|            |  6  | 基本Timer1模块时钟使能位  0x0:关闭时钟  0x1:打开时钟                 |
|            |  5  | 基本Timer0模块时钟使能位  0x0:关闭时钟  0x1:打开时钟                 |
|  CLK_CON3  |  4  | CRC模块时钟使能位         0x0:关闭时钟  0x1:打开时钟                 |
|            |  3  | I2C模块时钟使能位         0x0:关闭时钟  0x1:打开时钟                 |
|            |  2  | SPI0模块时钟使能位        0x0:关闭时钟  0x1:打开时钟                 |
|            |  1  | UART1模块时钟使能位       0x0:关闭时钟  0x1:打开时钟                 |
|            |  0  | UART0模块时钟使能位       0x0:关闭时钟  0x1:打开时钟                 |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_CON3
#define _CLK_CON3
#define CLK_TMR2_EN(n)             ((n) << 7)  // 基本Timer2模块时钟使能位  0x0:关闭时钟  0x1:打开时钟
#define CLK_TMR1_EN(n)             ((n) << 6)  // 基本Timer1模块时钟使能位  0x0:关闭时钟  0x1:打开时钟
#define CLK_TMR0_EN(n)             ((n) << 5)  // 基本Timer0模块时钟使能位  0x0:关闭时钟  0x1:打开时钟
#define CLK_CRC_EN(n)              ((n) << 4)  // CRC模块时钟使能位         0x0:关闭时钟  0x1:打开时钟
#define CLK_I2C_EN(n)              ((n) << 3)  // I2C模块时钟使能位         0x0:关闭时钟  0x1:打开时钟
#define CLK_SPI0_EN(n)             ((n) << 2)  // SPI0模块时钟使能位        0x0:关闭时钟  0x1:打开时钟
#define CLK_UART1_EN(n)            ((n) << 1)  // UART1模块时钟使能位       0x0:关闭时钟  0x1:打开时钟
#define CLK_UART0_EN(n)            ((n) << 0)  // UART0模块时钟使能位       0x0:关闭时钟  0x1:打开时钟

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 测试时钟使能位            0x0:关闭时钟  0x1:打开时钟                 |
|            |  6  | CMP模块时钟使能位         0x0:关闭时钟  0x1:打开时钟                 |
|            |  5  | 片上SRAM时钟使能位        0x0:关闭时钟  0x1:打开时钟                 |
|  CLK_CON4  |  4  | AHB1 CLK时钟使能位        0x0:关闭时钟  0x1:打开时钟                 |
|            |  3  | ADC模块时钟使能位         0x0:关闭时钟  0x1:打开时钟                 |
|            |  2  | 高级Timer2模块时钟使能位  0x0:关闭时钟  0x1:打开时钟                 |
|            |  1  | 高级Timer1模块时钟使能位  0x0:关闭时钟  0x1:打开时钟                 |
|            |  0  | 高级Timer0模块时钟使能位  0x0:关闭时钟  0x1:打开时钟                 |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_CON4
#define _CLK_CON4
#define CLK_TEST_EN(n)             ((n) << 7)  // 测试时钟使能位            0x0:关闭时钟  0x1:打开时钟
#define CLK_CMP_EN(n)              ((n) << 6)  // CMP模块时钟使能位         0x0:关闭时钟  0x1:打开时钟
#define CLK_RAM_EN(n)              ((n) << 5)  // 片上SRAM时钟使能位        0x0:关闭时钟  0x1:打开时钟
#define CLK_AHB1_EN(n)             ((n) << 4)  // AHB1 CLK时钟使能位        0x0:关闭时钟  0x1:打开时钟
#define CLK_ADC_EN(n)              ((n) << 3)  // ADC模块时钟使能位         0x0:关闭时钟  0x1:打开时钟
#define CLK_STMR2_EN(n)            ((n) << 2)  // 高级Timer2模块时钟使能位  0x0:关闭时钟  0x1:打开时钟
#define CLK_STMR1_EN(n)            ((n) << 1)  // 高级Timer1模块时钟使能位  0x0:关闭时钟  0x1:打开时钟
#define CLK_STMR0_EN(n)            ((n) << 0)  // 高级Timer0模块时钟使能位  0x0:关闭时钟  0x1:打开时钟

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | hirc_clk时钟使能位  0x0:关闭时钟  0x1:打开时钟                       |
|            |  6  | TouchKey模块时钟使能位  0x0:关闭时钟  0x1:打开时钟                   |
|            | 5:4 | 基本Timer2模块时钟选择位                                             |
|  CLK_CON5  |     | 0x0:选择sys_clk  0x1:选择xoscm  0x2:选择hirc_div_clk  0x3:选择rc64k  |
|            | 3:2 | LVD模块滤波时钟源选择位                                              |
|            |     | 0x0:选择sys_clk  0x1:选择hirc_div_clk  0x2:选择xoscm  0x3:选择rc64k  |
|            |  1  |                                                                      |
|            |  0  | 测试时钟1使能位  0x0:关闭时钟  0x1:打开时钟                          |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_CON5
#define _CLK_CON5
#define CLK_HIRC_EN(n)             ((n) << 7)  // hirc_clk时钟使能位  0x0:关闭时钟  0x1:打开时钟
#define CLK_TK_EN(n)               ((n) << 6)  // TouchKey模块时钟使能位  0x0:关闭时钟  0x1:打开时钟
#define CLK_TMR2_SEL(n)            ((n) << 4)  // 基本Timer2模块时钟选择位
                                               // 0x0:选择sys_clk  0x1:选择xoscm  0x2:选择hirc_div_clk  0x3:选择rc64k
#define CLK_LVD_DBS_SEL(n)         ((n) << 2)  // LVD模块滤波时钟源选择位
                                               // 0x0:选择sys_clk  0x1:选择hirc_div_clk  0x2:选择xoscm  0x3:选择rc64k
                                               // 
#define CLK_TEST1_EN(n)            ((n) << 0)  // 测试时钟1使能位  0x0:关闭时钟  0x1:打开时钟

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            | 7:6 | Hirc clk时钟分频选择  0x0:不分频  0x1:2分频  0x2:4分频  0x3:8分频    |
|  CLK_CON6  | 5:0 | 存储器烧写时钟分频设置                                               |
|            |     | 0x00:不分频  0x01:2分频  0x02:3分频  ......  0x3E:63分频  0x3F:关闭  |
|            |     | Note:配置比为n+1时钟                                                 |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_CON6
#define _CLK_CON6
#define CLK_HIRC_DIV_SEL(n)        ((n) << 6)  // Hirc clk时钟分频选择  0x0:不分频  0x1:2分频  0x2:4分频  0x3:8分频
#define CLK_FLASH_DIV(n)           ((n) << 0)  // 存储器烧写时钟分频设置
                                               // 0x00:不分频  0x01:2分频  0x02:3分频  ......  0x3E:63分频  0x3F:关闭
                                               // Note:配置比为n+1时钟

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | ADC_TRIMCKSEL_VDD配置                                                |
|  CLK_CON7  |     | 0x0:Normal  0x1:Digital/软件校准时选CK_VDD直接作为时钟               |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_CON7
#define _CLK_CON7
#define CLK_ADC_TRM_SEL(n)         ((n) << 7)  // ADC_TRIMCKSEL_VDD配置
                                               // 0x0:Normal  0x1:Digital/软件校准时选CK_VDD直接作为时钟

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | ADC软件trim 功能使能位  0x0:选择关闭  0x1:选择打开                   |
|            |  6  | ADC软件trim SOC控制位                                                |
|            |  5  | ADC软件trim triming值控制位                                          |
|  CLK_CON8  |  4  | ADC软件trim 时钟控制位                                               |
|            | 3:2 | P3 滤波时钟选择位                                                    |
|            |     | 0x0:选择hirc_div_clk  0x1:选择xoscm  0x2:选择sys_clk  0x3:选择rc64k  |
|            | 1:0 | P2 滤波时钟选择位                                                    |
|            |     | 0x0:选择hirc_div_clk  0x1:选择xoscm  0x2:选择sys_clk  0x3:选择rc64k  |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_CON8
#define _CLK_CON8
#define CLK_ADC_SFTRM_EN(n)        ((n) << 7)  // ADC软件trim 功能使能位  0x0:选择关闭  0x1:选择打开
#define CLK_ADC_SFTRM_SOC(n)       ((n) << 6)  // ADC软件trim SOC控制位
#define CLK_ADC_SFTRM_TRM(n)       ((n) << 5)  // ADC软件trim triming值控制位
#define CLK_ADC_SFTRM_CLK(n)       ((n) << 4)  // ADC软件trim 时钟控制位
#define CLK_P3_DBS_SEL(n)          ((n) << 2)  // P3 滤波时钟选择位
                                               // 0x0:选择hirc_div_clk  0x1:选择xoscm  0x2:选择sys_clk  0x3:选择rc64k
#define CLK_P2_DBS_SEL(n)          ((n) << 0)  // P2 滤波时钟选择位
                                               // 0x0:选择hirc_div_clk  0x1:选择xoscm  0x2:选择sys_clk  0x3:选择rc64k

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|  CLK_ACON0  |  7  | HRC时钟使能信号  0x0:关闭  0x1:打开                                  |
|            | 6:0 | HRC时钟频率细调(step=0.5%)  0x00:low  ......  0x7F:high              |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_ACON0
#define _CLK_ACON0
#define CLK_AIP_HRC_EN(n)              ((n) << 7)  // HRC时钟使能信号  0x0:关闭  0x1:打开
#define CLK_AIP_HRC_SC(n)              ((n) << 0)  // HRC时钟频率细调(step=0.5%)  0x00:low  ......  0x7F:high

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 输出时钟迟滞窗口选择  0x0:没有迟滞  0x1:有+/-10%的迟滞               |
|            |  6  | HRC内部模拟电压测试使能信号  0x0:关闭  0x1:打开                      |
|  CLK_ACON1  | 5:4 | HRC时钟频率温度系数调节                                              |
|            |     | 0x0:-1.17%(100℃)  0x1:-0.82%(65℃) 0x2:-0.47%(40℃) 0x3:+0.67%(20℃)|
|            | 3:2 | HRC时钟频率细调(step=0.5%)  0x0:low  ......  0x3:high                |
|            | 1:0 | HRC时钟频率粗调  0x0:24MHz  0x1:48MHz  0x2:48MHz  0x3:72MHz          |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_ACON1
#define _CLK_ACON1
#define CLK_AIP_XOSC_HY(n)             ((n) << 7)  // 输出时钟迟滞窗口选择  0x0:没有迟滞  0x1:有+/-10%的迟滞
#define CLK_AIP_HRC_TEST_EN(n)         ((n) << 6)  // HRC内部模拟电压测试使能信号  0x0:关闭  0x1:打开
#define CLK_AIP_HRC_TEMP_SEL(n)        ((n) << 4)  // HRC时钟频率温度系数调节  
                                                   // 0x0:-1.17%(100℃)  0x1:-0.82%(65℃)  0x2:-0.47%(40℃)  0x3:+0.67%(20℃)
#define CLK_AIP_HRC_SC_ADD(n)          ((n) << 2)  // HRC时钟频率细调(step=0.5%)  0x0:low  ......  0x3:high
#define CLK_AIP_HRC_SR(n)              ((n) << 0)  // HRC时钟频率粗调  0x0:24MHz  0x1:48MHz  0x2:48MHz  0x3:72MHz

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 高速晶振使能  0x0:不使能  0x1:使能                                   |
|            | 6:4 | 高速晶振驱动能力选择  X1=42uA=1mS@TT40                               |
|  CLK_XOSC  |     | 0x0:x2  0x1:x3  0x2:x4  0x3:x5  0x4:x6  0x5:x7  0x6:x8  0x7:x9       |
|            |  3  | 32.768KHz低速晶振使能  0x0:不使能  0x1:使能                          |
|            | 2:0 | 32.768KHz低速晶振驱动能力选择  X1=0.39uA=5.1uS@TT40                  |
|            |     | 0x0:X1  0x1:X2  0x2:X3  0x3:X4  0x4:X5  0x5:X6  0x6:X7  0x7:X8       |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// CLK_XOSC
#define _CLK_XOSC
#define CLK_XOSC_HIGH_EN(n)        ((n) << 7)  // 高速晶振使能  0x0:不使能  0x1:使能
#define CLK_XOSC_HIGH_DR(n)        ((n) << 4)  // 高速晶振驱动能力选择  X1=42uA=1mS@TT40
                                               // 0x0:x2  0x1:x3  0x2:x4  0x3:x5  0x4:x6  0x5:x7  0x6:x8  0x7:x9
#define CLK_XOSC_LOW_EN(n)         ((n) << 3)  // 32.768KHz低速晶振使能  0x0:不使能  0x1:使能
#define CLK_XOSC_LOW_DR(n)         ((n) << 0)  // 32.768KHz低速晶振驱动能力选择  X1=0.39uA=5.1uS@TT40
                                               // 0x0:X1  0x1:X2  0x2:X3  0x3:X4  0x4:X5  0x5:X6  0x6:X7  0x7:X8



/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|                                            IO_MAP                                                |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 高级timer比较点C相等触发timer0功能使能  0x0:关闭  0x1:使能           |
|            |  6  | hirc_clk_div8输出到P12的使能位          0x0:关闭  0x1:使能           |
|            |  5  | MCLR MAP3选择位  0x0:不选择P15  0x1:选择P15                          |
|   IO_MAP   |  4  | MCLR MAP2选择位  0x0:不选择P25  0x1:选择P25                          |
|            |  3  | MCLR MAP1选择位  0x0:不选择P23  0x1:选择P23                          |
|            |  2  | LED DMA使能位    0x0:关闭       0x1:使能                             |
|            |  1  | MCLR功能使能位   0x0:关闭       0x1:使能                             |
|            |  0  | 烧写/调试pin脚选择位  0x0:不选择  0x1:选择P31[ISP_CLK],P17[ISP_DAT]  |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// IO_MAP
#define _IO_MAP
#define MAP_STMR_CMP_CEQ_EN(n)     ((n) << 7)  // 高级timer比较点C相等触发timer0功能使能  0x0:关闭  0x1:使能
#define MAP_TK_CLK_MAP_EN(n)       ((n) << 6)  // hirc_clk_div8输出到P12的使能位          0x0:关闭  0x1:使能
#define MAP_MCLR_MAP3_EN(n)        ((n) << 5)  // MCLR MAP3选择位  0x0:不选择P15  0x1:选择P15
#define MAP_MCLR_MAP2_EN(n)        ((n) << 4)  // MCLR MAP2选择位  0x0:不选择P25  0x1:选择P25
#define MAP_MCLR_MAP1_EN(n)        ((n) << 3)  // MCLR MAP1选择位  0x0:不选择P23  0x1:选择P23
#define MAP_LED_DMA_EN(n)          ((n) << 2)  // LED DMA使能位    0x0:关闭       0x1:使能
#define MAP_MCLR_EN(n)             ((n) << 1)  // MCLR功能使能位   0x0:关闭       0x1:使能
#define MAP_ISP_MAP1(n)            ((n) << 0)  // 烧写/调试pin脚选择位  0x0:不选择  0x1:选择P31[ISP_CLK],P17[ISP_DAT]



/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|                                            LP                                                    |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 低功耗SLEEP模式唤醒通道3触发条件设置  0x0:高电平触发唤醒             |
|            |     |                                       0x1:低电平触发唤醒             |
|            |  6  | 低功耗SLEEP模式唤醒通道2触发条件设置  0x0:高电平触发唤醒             |
|            |     |                                       0x1:低电平触发唤醒             |
|            |  5  | 低功耗SLEEP模式唤醒通道1触发条件设置  0x0:高电平触发唤醒             |
|            |     |                                       0x1:低电平触发唤醒             |
|  LP_WKCON  |  4  | 低功耗SLEEP模式唤醒通道0触发条件设置  0x0:高电平触发唤醒             |
|            |     |                                       0x1:低电平触发唤醒             |
|            |  3  | 低功耗SLEEP模式唤醒通道3功能使能位  0x0:关闭  0x1:打开               |
|            |  2  | 低功耗SLEEP模式唤醒通道2功能使能位  0x0:关闭  0x1:打开               |
|            |  1  | 低功耗SLEEP模式唤醒通道1功能使能位  0x0:关闭  0x1:打开               |
|            |  0  | 低功耗SLEEP模式唤醒通道0功能使能位  0x0:关闭  0x1:打开               |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// LP_WKCON
#define _LP_WKCON
#define LP_WKUP_3_EDG(n)              ((n) << 7)  // 低功耗SLEEP模式唤醒通道3触发条件设置  0x0:高电平触发唤醒  0x1:低电平触发唤醒
#define LP_WKUP_2_EDG(n)              ((n) << 6)  // 低功耗SLEEP模式唤醒通道2触发条件设置  0x0:高电平触发唤醒  0x1:低电平触发唤醒
#define LP_WKUP_1_EDG(n)              ((n) << 5)  // 低功耗SLEEP模式唤醒通道1触发条件设置  0x0:高电平触发唤醒  0x1:低电平触发唤醒
#define LP_WKUP_0_EDG(n)              ((n) << 4)  // 低功耗SLEEP模式唤醒通道0触发条件设置  0x0:高电平触发唤醒  0x1:低电平触发唤醒
#define LP_WKUP_3_EN(n)               ((n) << 3)  // 低功耗SLEEP模式唤醒通道3功能使能位  0x0:关闭  0x1:打开
#define LP_WKUP_2_EN(n)               ((n) << 2)  // 低功耗SLEEP模式唤醒通道2功能使能位  0x0:关闭  0x1:打开
#define LP_WKUP_1_EN(n)               ((n) << 1)  // 低功耗SLEEP模式唤醒通道1功能使能位  0x0:关闭  0x1:打开
#define LP_WKUP_0_EN(n)               ((n) << 0)  // 低功耗SLEEP模式唤醒通道0功能使能位  0x0:关闭  0x1:打开

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 低功耗SLEEP模式唤醒通道3 清pending位  0x0:无操作  0x1:清pending      |
|            |  6  | 低功耗SLEEP模式唤醒通道2 清pending位  0x0:无操作  0x1:清pending      |
|            |  5  | 低功耗SLEEP模式唤醒通道1 清pending位  0x0:无操作  0x1:清pending      |
|  LP_WKPND  |  4  | 低功耗SLEEP模式唤醒通道0 清pending位  0x0:无操作  0x1:清pending      |
|            |  3  | 低功耗SLEEP模式唤醒通道3唤醒pending位  0x0:无pending  0x1:有pending  |
|            |  2  | 低功耗SLEEP模式唤醒通道2唤醒pending位  0x0:无pending  0x1:有pending  |
|            |  1  | 低功耗SLEEP模式唤醒通道1唤醒pending位  0x0:无pending  0x1:有pending  |
|            |  0  | 低功耗SLEEP模式唤醒通道0唤醒pending位  0x0:无pending  0x1:有pending  |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// LP_WKPND
#define _LP_WKPND
#define LP_WKUP_3_PCLR(n)             ((n) << 7)  // 低功耗SLEEP模式唤醒通道3 清pending位  0x0:无操作  0x1:清pending
#define LP_WKUP_2_PCLR(n)             ((n) << 6)  // 低功耗SLEEP模式唤醒通道2 清pending位  0x0:无操作  0x1:清pending
#define LP_WKUP_1_PCLR(n)             ((n) << 5)  // 低功耗SLEEP模式唤醒通道1 清pending位  0x0:无操作  0x1:清pending
#define LP_WKUP_0_PCLR(n)             ((n) << 4)  // 低功耗SLEEP模式唤醒通道0 清pending位  0x0:无操作  0x1:清pending
#define LP_WKUP_3_PND(n)              ((n) << 3)  // 低功耗SLEEP模式唤醒通道3唤醒pending位  0x0:无pending  0x1:有pending
#define LP_WKUP_2_PND(n)              ((n) << 2)  // 低功耗SLEEP模式唤醒通道2唤醒pending位  0x0:无pending  0x1:有pending
#define LP_WKUP_1_PND(n)              ((n) << 1)  // 低功耗SLEEP模式唤醒通道1唤醒pending位  0x0:无pending  0x1:有pending
#define LP_WKUP_0_PND(n)              ((n) << 0)  // 低功耗SLEEP模式唤醒通道0唤醒pending位  0x0:无pending  0x1:有pending

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | Idle低功耗模式使能  0x0:关闭  0x1:打开,进入Idle低功耗模式            |
|            |  6  | Sleep低功耗模式唤醒后继续跑后续程序使能位                            |
|            |     | 0x0:Sleep模式唤醒后复位重新跑程序  0x1:Sleep模式唤醒后继续跑后续程序 |
|            |  5  | 用户程序保护功能关闭位  0x0:打开(默认状态)  0x1:关闭                 |
|            |     | Note:CPU和ISD都无法写寄存器!                                         |
|   LP_CON   |  4  | 低功耗进入低速RC选择                                                 |
|            |     | 低功耗Sleep模式下,可以通过配置该寄存器为1,在系统进入Sleep模式后自动  |
|            |     | gate住RC64K低速时钟,目的是减少Sleep的漏电功耗。也可以选择不关闭RC64K |
|            |     | Note:该功能只能在Sleep低功耗模式下,由GPIO 唤醒系统的场景下才能使用   |
|            |     |      该功能。如果是WUT定时唤醒场景下不可以关闭该时钟,造成WUT没有工   |
|            |     |      作时钟而不能唤醒系统。                                          |
|            |  3  | ISD模式下低功耗功能关闭位  0x0:使能  0x1:关闭                        |
|            |  2  | 测试模式下hold住CPU使能  0x0:不hold CPU  0x1:hold CPU                |
|            |     | Note:用户程序不要随便写这个寄存器,会造成系统功能异常的风险           |
|            |  1  | Stop低功耗模式使能   0x0:关闭  0x1:打开,进入Stop低功耗模式           |
|            |  0  | Sleep低功耗模式使能  0x0:关闭  0x1:打开,进入Sleep低功耗模式          |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// LP_CON
#define _LP_CON
#define LP_IDLE_EN(n)            ((n) << 7)    // Idle低功耗模式使能  0x0:关闭  0x1:打开,进入Idle低功耗模式
#define LP_SLEEP_GO_EN(n)        ((n) << 6)    // Sleep低功耗模式唤醒后继续跑后续程序使能位
                                               // 0x0:Sleep模式唤醒后复位重新跑程序  0x1:Sleep模式唤醒后继续跑后续程序
#define LP_CP_DIS(n)             ((n) << 5)    // 用户程序保护功能关闭位  0x0:打开(默认状态)  0x1:关闭
                                               // Note:CPU和ISD都无法写寄存器!
#define LP_GLIRC_EN(n)           ((n) << 4)    // 低功耗进入低速RC选择
                                               // 低功耗Sleep模式下,可以通过配置该寄存器为1,在系统进入Sleep模式后自动
                                               // gate住RC64K低速时钟,目的是减少Sleep的漏电功耗。也可以选择不关闭RC64K
                                               // Note:该功能只能在Sleep低功耗模式下,由GPIO 唤醒系统的场景下才能使用
                                               //      该功能。如果是WUT定时唤醒场景下不可以关闭该时钟,造成WUT没有工
                                               //      作时钟而不能唤醒系统。
#define LP_ISD_DIS_LP_EN(n)      ((n) << 3)    // ISD模式下低功耗功能关闭位  0x0:使能  0x1:关闭
#define LP_TMH_CPU(n)            ((n) << 2)    // 测试模式下hold住CPU使能  0x0:不hold CPU  0x1:hold CPU
                                               // Note:用户程序不要随便写这个寄存器,会造成系统功能异常的风险
#define LP_STOP_EN(n)            ((n) << 1)    // Stop低功耗模式使能   0x0:关闭  0x1:打开,进入Stop低功耗模式
#define LP_SLEEP_EN(n)           ((n) << 0)    // Sleep低功耗模式使能  0x0:关闭  0x1:打开,进入Sleep低功耗模式



/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|                                            WDT                                                   |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | WDT唤醒功能使能位  写WDT_KEY=0xEE,置位  写WDT_KEY=0x22,复位          |
|            |     | 0x0:关闭  0x1:打开                                                   |
|            |  6  | WDT计数器计满标记位  写WDT_KEY=0xAA,清掉该标记位                     |
|            |     | 0x0:计数器未计满  0x1:计数器计满                                     |
|            |  5  | WDT中断功能使能位  写WDT_KEY=0x5A,置位  写WDT_KEY=0xA5,复位          |
|   WDT_CON  |     | 0x1:打开中断功能  0x0:打开复位功能                                   |
|            |  4  | WDT使能位  写WDT_KEY=0xCC,置位  写WDT_KEY=0xDD,复位                  |
|            |     | 0x0:关闭watchdog功能  0x1:打开watchdog功能                           |
|            | 3:0 | 预分频系数  每次配置该位域之前必须先写WDT_KEY=0x55                   |
|            |     | 0x0:不分频    0x1:2分频     0x2:4分频      0x3:8分频                 |
|            |     | 0x4:16分频    0x5:32分频    0x6:64分频     0x7:128分频               |
|            |     | 0x8:256分频   0x9:512分频   0xA:1024分频   0xB:2048分频              |
|            |     | 0xC:4096分频  0xD:8192分频  0xE:16384分频  0xF:32768分频             |
|            |     | 看门狗复位时间=1/32K*256*分频系数                                    |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// WDT_CON
#define _WDT_CON
#define WDT_WAKE_EN(n)             ((n) << 7)  // WDT唤醒功能使能位  写WDT_KEY=0xEE,置位  写WDT_KEY=0x22,复位
                                               // 0x0:关闭  0x1:打开
#define WDT_OVER_FLAG(n)           ((n) << 6)  // WDT计数器计满标记位  写WDT_KEY=0xAA,清掉该标记位
                                               // 0x0:计数器未计满  0x1:计数器计满
#define WDT_IRQ_EN(n)              ((n) << 5)  // WDT中断功能使能位  写WDT_KEY=0x5A,置位  写WDT_KEY=0xA5,复位
                                               // 0x1:打开中断功能  0x0:打开复位功能
#define WDT_EN(n)                  ((n) << 4)  // WDT使能位  写WDT_KEY=0xCC,置位  写WDT_KEY=0xDD,复位
                                               // 0x0:关闭watchdog功能  0x1:打开watchdog功能
#define WDT_PRESCALE_SEL(n)        ((n) << 0)  // 预分频系数  每次配置该位域之前必须先写WDT_KEY=0x55
                                               // 0x0:不分频    0x1:2分频     0x2:4分频      0x3:8分频
                                               // 0x4:16分频    0x5:32分频    0x6:64分频     0x7:128分频
                                               // 0x8:256分频   0x9:512分频   0xA:1024分频   0xB:2048分频
                                               // 0xC:4096分频  0xD:8192分频  0xE:16384分频  0xF:32768分频
                                               // 看门狗复位时间=1/32K*256*分频系数

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            | 7:0 | 喂狗数据寄存器                                                       |
|            |     | 0x55:表示允许访问和设置wdt_psr  0xDD:关闭看门狗                      |
|   WDT_KEY  |     | 0xCC:启动看门狗工作             0xAA:喂狗并清除wdt_pending           |
|            |     | 0xA5:关闭中断                   0x5A:开启中断                        |
|            |     | 0x22:关闭wake up                0xEE:开启wake up                     |
|            |     | Note:软件必须以一定的间隔写入0xAA完成喂狗操作,否则,当计数器为0时,    |
|            |     |      看门狗会产生复位!当pending为1的时候,写入0xAA清除pending!        |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// WDT_KEY
#define _WDT_KEY
#define WDT_KEY_VAL(n)             ((n) << 0)  // 喂狗数据寄存器
                                               // 0x55:表示允许访问和设置wdt_psr  0xDD:关闭看门狗
                                               // 0xCC:启动看门狗工作             0xAA:喂狗并清除wdt_pending
                                               // 0xA5:关闭中断                   0x5A:开启中断
                                               // 0x22:关闭wake up                0xEE:开启wake up
                                               // Note:软件必须以一定的间隔写入0xAA完成喂狗操作,否则,当计数器为0时,
                                               //      看门狗会产生复位!当pending为1的时候,写入0xAA清除pending!



/***************************************************************************************************
|--------------------------------------------------------------------------------------------------|
|                                            LVD                                                   |
|--------------------------------------------------------------------------------------------------|
***************************************************************************************************/

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | LVD中断和复位功能输出到系统使能位  0x0:关闭  0x1:打开                |
|            |     | Note:使用LVD所有相关功能，必须把LVDOE设置位1                         |
|            |  6  | LVD VDD低电压复位功能使能位                                          |
|            |     | 0x0:低电中断功能使能  0x1:低电复位功能使能                           |
|            |  5  | LVD VCC低电压复位功能使能位                                          |
|  LVD_CON0  |     | 0x0:低电中断功能使能  0x1:低电复位功能使能                           |
|            | 4:2 | VCCA电源电压低电检测阈值设置                                         |
|            |     | 0x0:2.0V  0x1:2.2V  0x2:2.4V  0x3:2.7V                               |
|            |     | 0x4:3.0V  0x5:3.7V  0x6:4.0V  0x7:4.3V                               |
|            |  1  | 1.5V数字逻辑系统工作电压VDD低电检测功能使能位  0x0:关闭  0x1:打开    |
|            |  0  | VCC电源VCC电压低电检测功能使能位  0x0:关闭  0x1:打开                 |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// LVD_CON0
#define _LVD_CON0
#define LVD_OUTSYS_EN(n)           ((n) << 7)  // LVD中断和复位功能输出到系统使能位  0x0:关闭  0x1:打开
                                               // Note:使用LVD所有相关功能，必须把LVDOE设置位1
#define LVD_VDD_RST_EN(n)          ((n) << 6)  // LVD VDD低电压复位功能使能位
                                               // 0x0:低电中断功能使能  0x1:低电复位功能使能
#define LVD_VCC_RST_EN(n)          ((n) << 5)  // LVD VCC低电压复位功能使能位
                                               // 0x0:低电中断功能使能  0x1:低电复位功能使能
#define LVD_VCC_VPT_SET(n)         ((n) << 2)  // VCCA电源电压低电检测阈值设置
                                               // 0x0:2.0V  0x1:2.2V  0x2:2.4V  0x3:2.7V  
                                               // 0x4:3.0V  0x5:3.7V  0x6:4.0V  0x7:4.3V
#define LVD_VDD_DETE_EN(n)         ((n) << 1)  // 1.5V数字逻辑系统工作电压VDD低电检测功能使能位  0x0:关闭  0x1:打开
#define LVD_VCC_DETE_EN(n)         ((n) << 0)  // VCC电源VCC电压低电检测功能使能位  0x0:关闭  0x1:打开

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  |                                                                      |
|            |  6  | VDD过流检测标记位  0x0:VDD没有过流  0x1:VDD过流  Note:写1清除标记位! |
|            |  5  | VDD低电检测标记位  0x0:VDD没有低电  0x1:VDD低电  Note:写1清除标记位! |
|  LVD_CON1  |  4  | VCC低电检测标记位  0x0:VCC没有低电  0x1:VCC低电  Note:写1清除标记位! |
|            |  3  | LVD VCC低电检测同步器关闭位  0x0:打开同步器  0x1:关闭同步器          |
|            |  2  | VDD过流滤波去抖功能关闭位    0x0:打开滤波器  0x1:关闭滤波器          |
|            |  1  | VDD低电滤波去抖功能关闭位    0x0:打开滤波器  0x1:关闭滤波器          |
|            |  0  | VCC低电滤波去抖功能关闭位  0x0:打开滤波器  0x1:关闭滤波器            |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// LVD_CON1
#define _LVD_CON1
#define LVD_OC_FLAG(n)             ((n) << 6)  // VDD过流检测标记位  0x0:VDD没有过流  0x1:VDD过流  Note:写1清除标记位!
#define LVD_VDD_FLAG(n)            ((n) << 5)  // VDD低电检测标记位  0x0:VDD没有低电  0x1:VDD低电  Note:写1清除标记位!
#define LVD_VCC_FLAG(n)            ((n) << 4)  // VCC低电检测标记位  0x0:VCC没有低电  0x1:VCC低电  Note:写1清除标记位!
#define LVD_VCC_SYN_DIS(n)         ((n) << 3)  // LVD VCC低电检测同步器关闭位  0x0:打开同步器  0x1:关闭同步器
#define LVD_VDD_OC_BPS_EN(n)       ((n) << 2)  // VDD过流滤波去抖功能关闭位    0x0:打开滤波器  0x1:关闭滤波器
#define LVD_VDD_BPS_EN(n)          ((n) << 1)  // VDD低电滤波去抖功能关闭位    0x0:打开滤波器  0x1:关闭滤波器
#define LVD_VCC_BPS_EN(n)          ((n) << 0)  // VCC低电滤波去抖功能关闭位    0x0:打开滤波器  0x1:关闭滤波器

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  |                                                                      |
|            |  6  | LVD低电和过流异常检测滤波器高电平滤波时钟周期设置数目                |
|            |     | Note:LVD滤波时钟可以通过系统配置寄存器CLKCON5[3:2]来选择。用户可以根 |
|  LVD_CON2  |     |      据使用场景来选择滤波功能。滤波会导致异常发生到系统收到异常会有  |
|            |     |      延迟时间，延迟时间会由设置的滤波的时钟周期和配置滤波高电平和低  |
|            |     |      电平滤波周期数目共同决定，设置的滤波时钟周期越长，滤波周期数目  |
|            |     |      越多会导致该延迟越长。用户在使用时可以通过对该延迟的容忍度来合  |
|            |     |      理配置。在有些对延迟比较敏感的应用场景可以关闭该滤波功能。      |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// LVD_CON2
#define _LVD_CON2
#define LVD_DBS_HLMT(n)            ((n) << 6)  // LVD低电和过流异常检测滤波器高电平滤波时钟周期设置数目
                                               // Note:LVD滤波时钟可以通过系统配置寄存器CLKCON5[3:2]来选择。用户可以根
                                               //      据使用场景来选择滤波功能。滤波会导致异常发生到系统收到异常会有
                                               //      延迟时间，延迟时间会由设置的滤波的时钟周期和配置滤波高电平和低
                                               //      电平滤波周期数目共同决定，设置的滤波时钟周期越长，滤波周期数目
                                               //      越多会导致该延迟越长。用户在使用时可以通过对该延迟的容忍度来合
                                               //      理配置。在有些对延迟比较敏感的应用场景可以关闭该滤波功能。

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  |                                                                      |
|            |  6  | LVD低电和过流异常检测滤波器低电平滤波时钟周期设置数目                |
|            |     | Note:LVD滤波时钟可以通过系统配置寄存器CLKCON5[3:2]来选择。用户可以根 |
|  LVD_CON3  |     |      据使用场景来选择滤波功能。滤波会导致异常发生到系统收到异常会有  |
|            |     |      延迟时间，延迟时间会由设置的滤波的时钟周期和配置滤波高电平和低  |
|            |     |      电平滤波周期数目共同决定，设置的滤波时钟周期越长，滤波周期数目  |
|            |     |      越多会导致该延迟越长。用户在使用时可以通过对该延迟的容忍度来合  |
|            |     |      理配置。在有些对延迟比较敏感的应用场景可以关闭该滤波功能。      |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// LVD_CON3
#define _LVD_CON3
#define LVD_DBS_LLMT(n)            ((n) << 6)  // LVD低电和过流异常检测滤波器低电平滤波时钟周期设置数目
                                               // Note:LVD滤波时钟可以通过系统配置寄存器CLKCON5[3:2]来选择。用户可以根
                                               //      据使用场景来选择滤波功能。滤波会导致异常发生到系统收到异常会有
                                               //      延迟时间，延迟时间会由设置的滤波的时钟周期和配置滤波高电平和低
                                               //      电平滤波周期数目共同决定，设置的滤波时钟周期越长，滤波周期数目
                                               //      越多会导致该延迟越长。用户在使用时可以通过对该延迟的容忍度来合
                                               //      理配置。在有些对延迟比较敏感的应用场景可以关闭该滤波功能。


/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

#ifdef __cplusplus
}
#endif

#endif // __SYSTEM_REG_H__

/**
  * @}
  */

/**
  * @}
  */

/*************************** (C) COPYRIGHT 2021 HUGE-IC ***** END OF FILE *****/
