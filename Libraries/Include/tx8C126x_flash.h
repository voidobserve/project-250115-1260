/**
  ******************************************************************************
  * @file    flash.h
  * @author  HUGE-IC Application Team
  * @version V1.0.0
  * @date    01-05-2021
  * @brief   This file contains all the FLASH LL firmware functions.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2021 HUGE-IC</center></h2>
  *
  *
  */ 
  
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __FLASH_H__
#define __FLASH_H__

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            | 7:6 |                                                                      |
|            |  5  | 写1触发DMA模式烧录                                                   |
|            |  4  | 写1触发页擦除                                                        |
| FLASH_CON  |  3  | 写1触发CRC校验,需要先配置寄器FLASH_CRCLEN的大小才可以触发该操作      |
|            |  2  |                                                                      |
|            |  1  | 写1触发扇区擦除                                                      |
|            |  0  | 写1触发烧录操作                                                      |
|            |----------------------------------------------------------------------------|
|            |     | Note:FLASH控制器带有操作保护功能,需要先正确配置FLASH_PASSWORD寄存器  |
|            |     |      才正确触发以上的操作                                            |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_CON
#define _FLASH_CON
#define FLASH_DMA_TRG(n)            ((n) << 5)  // 写1触发DMA模式烧录
#define FLASH_PER_TRG(n)            ((n) << 4)  // 写1触发页擦除
#define FLASH_CRC_TRG(n)            ((n) << 3)  // 写1触发CRC校验,需要先配置寄器FLASH_CRCLEN的大小才可以触发该操作
#define FLASH_SER_TRG(n)            ((n) << 1)  // 写1触发扇区擦除
#define FLASH_PROG_TRG(n)           ((n) << 0)  // 写1触发烧录操作

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | dma烧录等于dma长度的工作标志,写1清0  0x0:dma仍未烧录完成             |
|            |     |                                      0x1:dma烧录完成                 |
|            |  6  | dma烧录等于dma长度的一半的工作标志,写1清0                            |
|            |     | 0x0:dma烧录仍未烧录到一半  0x1:dma烧录超过一半                       |
| FLASH_STA  |  5  | 代码区域的CRC是否通过  0x0:代码区域CRC通过                           |
|            |     |                        0x1:代码区域CRC不通过/不开启这                |
|            |  4  | FLASH控制信号 0x0:information区没有通过检验(不能正常使用)            |
|            |     |             0x1:information区通过校验(能正常使用)                    |
|            |  3  | CRC模式工作标志位     0x0:正在进行CRC校验   0x1:空闲状态             |
|            |  2  | 全片擦除模式工作标志  0x0:正在进行全片擦除  0x1:空闲状态             |
|            |  1  | 扇区擦除模式工作标志  0x0:正在进行扇区擦除  0x1:空闲状态             |
|            |  0  | 烧录模式工作标志      0x0:正在进行烧录      0x1:空闲状态             |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_STA
#define _FLASH_STA
#define FLASH_OV_FLG(n)             ((n) << 7)  // dma烧录等于dma长度的工作标志,写1清0  0x0:dma仍未烧录完成
                                                //                                      0x1:dma烧录完成
#define FLASH_HF_FLG(n)             ((n) << 6)  // dma烧录等于dma长度的一半的工作标志,写1清0
                                                // 0x0:dma烧录仍未烧录到一半  0x1:dma烧录超过一半
#define FLASH_MAIN_CRFAIL(n)        ((n) << 5)  // 代码区域的CRC是否通过  0x0:代码区域CRC通过
                                                //                        0x1:代码区域CRC不通过/不开启这
#define FLASH_NVR_LOCK(n)           ((n) << 4)  // FLASH控制信号 0x0:information区没有通过检验(不能正常使用)
                                                //               0x1:information区通过校验(能正常使用)
#define FLASH_CRC_FLG(n)            ((n) << 3)  // CRC模式工作标志位     0x0:正在进行CRC校验   0x1:空闲状态
#define FLASH_CER_FLG(n)            ((n) << 2)  // 全片擦除模式工作标志  0x0:正在进行全片擦除  0x1:空闲状态
#define FLASH_SER_FLG(n)            ((n) << 1)  // 扇区擦除模式工作标志  0x0:正在进行扇区擦除  0x1:空闲状态
#define FLASH_PROG_FLG(n)           ((n) << 0)  // 烧录模式工作标志      0x0:正在进行烧录      0x1:空闲状态

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
| FLASH_DATA | 7:0 | FLASH存储器的数据位宽为8位                                           |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_DATA
#define _FLASH_DATA
#define FLASH_DATA(n)               ((n) << 0)  // 烧录FLASH存储器的数据

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|               | Bit |                    Description                                    |
|               |-------------------------------------------------------------------------|
|               | 7:6 | 扇区擦除时序控制(默认时间为100ms)                                 |
|               |     | 0x0:默认值  0x1:101ms  0x2:102ms  0x3:103ms                       |
| FLASH_TIMEREG0| 5:4 | 后同步信号时序控制信号(默认时间为2us)                             |
|               |     | 0x0:默认值  0x1:3us  0x2:4us  0x3:5us                             |
|               | 3:2 | 前同步信号时序控制信号(默认时间为2us)                             |
|               |     | 0x0:默认值  0x1:3us  0x2:4us  0x3:5us                             |
|               | 1:0 | 烧录时序控制信号(默认时间为30us)                                  |
|               |     | 0x0:默认值  0x1:31us  0x2:32us  0x3:33us                          |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_TIMEREG0
#define _FLASH_TIMEREG0
#define FLASH_TERH(n)               ((n) << 6)  // 扇区擦除时序控制(默认时间为100ms)
                                                // 0x0:默认值  0x1:101ms  0x2:102ms  0x3:103ms
#define FLASH_TPOAM(n)              ((n) << 4)  // 后同步信号时序控制信号(默认时间为2us)
                                                // 0x0:默认值  0x1:3us  0x2:4us  0x3:5us
#define FLASH_TPRAM(n)              ((n) << 2)  // 前同步信号时序控制信号(默认时间为2us)
                                                // 0x0:默认值  0x1:3us  0x2:4us  0x3:5us
#define FLASH_TPGHF(n)              ((n) << 0)  // 烧录时序控制信号(默认时间为30us)
                                                // 0x0:默认值  0x1:31us  0x2:32us  0x3:33us

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|               | Bit |                    Description                                    |
|               |-------------------------------------------------------------------------|
|               | 7:6 | 连续操作时序控制(默认时间为2*Tsys)                                |
|               |     | 0x0:默认值  0x1:3*Tsys  0x2:4*Tsys  0x3:5*Tsys                    |
| FLASH_TIMEREG1| 5:4 | 全片擦除时序控制信号(默认时间为100ms)                             |
|               |     | 0x0:默认值  0x1:101ms  0x2:102ms  0x3:103ms                       |
|               | 3:2 | 读周期时序控制信号                                                |
|               | 1:0 | 读信号高电平时序控制信号                                          |
|               |-------------------------------------------------------------------------|
|               |     | Note:TKH应配置大于等于TKP的值(TKP和TKH的配置请查看具体的配置表)   |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_TIMEREG1
#define _FLASH_TIMEREG1
#define FLASH_TCERH(n)              ((n) << 6)  // 全片擦除时序控制信号(默认时间为100ms)
                                                // 0x0:默认值  0x1:101ms  0x2:102ms  0x3:103ms
#define FLASH_TPEL(n)               ((n) << 4)  // 连续操作时序控制(默认时间为2*Tsys)
                                                // 0x0:默认值  0x1:3*Tsys  0x2:4*Tsys  0x3:5*Tsys
#define FLASH_TKP(n)                ((n) << 2)  // 读周期时序控制信号
#define FLASH_TKH(n)                ((n) << 0)  // 读信号高电平时序控制信号

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|             | Bit |                    Description                                      |
|             |---------------------------------------------------------------------------|
| FLASH_CRCLEN| 7:0 | CRC校验操作的数据大小(单位:字节)                                    |
|             |---------------------------------------------------------------------------|
|             |     | Note:当FLASH_CRCLEN的配置值为0时,CRC操作无法触发                    |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_CRCLEN
#define _FLASH_CRCLEN
#define FLASH_CRCLEN(n)            ((n) << 0)  // CRC校验操作的数据大小(单位:字节)

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|              | Bit |                    Description                                     |
|              |--------------------------------------------------------------------------|
|FLASH_PASSWORD| 7:0 | 操作保护密码,执行FLASH_CON的操作之前需要配置该寄存器,密码为0xB9    |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_PASSWORD
#define _FLASH_PASSWORD
#define FLASH_PASSWORD(n)           ((n) << 0)  // 操作保护密码,执行FLASH_CON的操作之前需要配置该寄存器,密码为0xB9

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|             | Bit |                    Description                                      |
|             |---------------------------------------------------------------------------|
| FLASH_ADDR  | 7:0 | FLASH存储器的地址为15位,需要操作的时候需要对该寄存器写两次,         |
|             |     | 第一次写高7位,第二次写低8位                                         |
|             |---------------------------------------------------------------------------|
|             |     | Note:进行FLASH的烧录/扇区擦除/页擦除/全片擦除时,需要将地址对齐,     |
|             |     |      否则无法进行操作                                               |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_ADDR
#define _FLASH_ADDR
#define FLASH_ADDR(n)               ((n) << 0)  // FLASH存储器的地址为15位,需要操作的时候需要对该寄存器写两次
                                                // 第一次写高7位,第二次写低8位

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            |  7  | 测试模式下的MODESEL信号  0x0:4次编程模式  0x1:1次编程模式            |
|            |  6  | 测试模式下的DPMODESEL信号                                            |
| FLASH_TRIM | 5:4 | 测试模式下的TRIM信号                                                 |
|            | 3:2 | 测试模式下的SSEL信号                                                 |
|            |  1  | 测试模式下的VRDCGSEL信号                                             |
|            |  0  | 测试模式下的TRF信号                                                  |
|            |----------------------------------------------------------------------------|
|            |     | Note:正常使用下不用配置这个寄存器(只供测试使用,在非测试模式下使用可  |
|            |     |      能会引发问题)                                                   |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_TRIM
#define _FLASH_TRIM
#define FLASH_MODE_SEL(n)           ((n) << 7)  // 测试模式下的MODESEL信号  0x0:4次编程模式  0x1:1次编程模式
#define FLASH_DP_MODE_SEL(n)        ((n) << 6)  // 测试模式下的DPMODESEL信号
#define FLASH_TRIM(n)               ((n) << 4)  // 测试模式下的TRIM信号
#define FLASH_SSEL(n)               ((n) << 2)  // 测试模式下的SSEL信号
#define FLASH_VRDCG_SEL(n)          ((n) << 1)  // 测试模式下的VRDCGSEL信号
#define FLASH_TRF(n)                ((n) << 0)  // 测试模式下的TRF信号

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|            | Bit |                    Description                                       |
|            |----------------------------------------------------------------------------|
|            | 7:5 |                                                                      |
|            |  4  | 在DMA烧录模式下,DMA完成产生系统中断使能  0x0:不使能中断  0x1:使能中断|
| FLASH_LOCK |  3  | LVD中断是否打断FLASH操作使能  0x0:不使能该功能  0x1:使能该功能       |
|            |  2  | 使能DMA操作时自动在烧录代码后添加烧录代码的CRC                       |
|            |     | 0x0:关闭功能  0x1:使能功能                                           |
|            |  1  | 使能最后倒数第1个sector的全擦除和页擦除保护                          |
|            |     | 0x0:使能保护  0x1:关闭保护                                           |
|            |  0  | 使能最后倒数第二个sector的全擦除和页擦除保护                         |
|            |     | 0x0:使能保护  0x1:关闭保护                                           |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_LOCK
#define _FLASH_LOCK
#define FLASH_DMA_IRQ_EN(n)         ((n) << 4)  // 在DMA烧录模式下，DMA完成产生系统中断使能  0x0:不使能中断  0x1:使能中断
#define FLASH_LVD_CLEAR_EN(n)       ((n) << 3)  // LVD中断是否打断FLASH操作使能  0x0:不使能该功能  0x1:使能该功能
#define FLASH_DMA_CRC_EN(n)         ((n) << 2)  // 使能DMA操作时自动在烧录代码后添加烧录代码的CRC  0x0:关闭功能  0x1:使能功能
#define FLASH_LOCK_SN2(n)           ((n) << 1)  // 使能最后倒数第1个sector的全擦除和页擦除保护  0x0:使能保护  0x1:关闭保护
#define FLASH_LOCK_SN1(n)           ((n) << 0)  // 使能最后倒数第2个sector的全擦除和页擦除保护  0x0:使能保护  0x1:关闭保护

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|               | Bit |                    Description                                    |
|               |-------------------------------------------------------------------------|
| FLASH_DMASTADR| 7:0 | FLASH的DMA烧录模式的初始地址(8byte对齐)                           |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_DMASTADR
#define _FLASH_DMASTADR
#define FLASH_DMA_ST_ADRR(n)        ((n) << 0)  // FLASH的DMA烧录模式的初始地址(8byte对齐)

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|             | Bit |                    Description                                      |
|             |---------------------------------------------------------------------------|
| FLASH_DMALEN| 7:0 | FLASH的DMA烧录模式的初始地址(8byte对齐)                             |
|             |---------------------------------------------------------------------------|
|             |     | Note:当FLASH_DMALEN的配置值为0时,DMA烧录无法触发                    |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_DMALEN
#define _FLASH_DMALEN
#define FLASH_DMA_LEN(n)            ((n) << 0)  // FLASH的DMA烧录模式的初始地址(8byte对齐)

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|              | Bit |                    Description                                     |
|              |--------------------------------------------------------------------------|
|              | 7:2 | 输入0x15,将强制从0地址执行程序,输入0x3A,                           |
|              |     | 将强制从BOOTADDR配置的区执行程序                                   |
| FLASH_BOOTCON| 1:0 | 跳转到代码区的地址                                                 |
|              |     | 0x0:默认从0开始  0x1:从2K开始  0x2:从4K开始  0x3:从6K开始          |
|              |--------------------------------------------------------------------------|
|              |     | Note:配置完该寄存器后，需要执行软复位才可以进行代码区跳转          |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_BOOTCON
#define _FLASH_BOOTCON
#define FLASH_BOOT_KEY(n)           ((n) << 2)  // 输入0x15,将强制从0地址执行程序,输入0x3A,
                                                // 将强制从BOOTADDR配置的区执行程序
#define FLASH_BOOT_ADDR(n)          ((n) << 0)  // 跳转到代码区的地址
                                                // 0x0:默认从0开始  0x1:从2K开始  0x2:从4K开始  0x3:从6K开始

/******************************************************************************************
|-----------------------------------------------------------------------------------------|
|             | Bit |                    Description                                      |
|             |---------------------------------------------------------------------------|
|             |  7  | 代码区的CRC是否通过                                                 |
|             |     | 0x0:没有通过/没有开启代码区CRC的功能  0x1:通过代码区CRC             |
|             |  6  |                                                                     |
|             |  5  | USER区域的CRC不通过的LOCK信号                                       |
|             |     | 0x0:USER区域的CRC不通过LOCK无效  0x1:USER区域的CRC不通过LOCK有效    |
| FLASH_ERRSTA|  4  | USER区域的CRC通过的LOCK信号                                         |
|             |     | 0x0:USER区域的CRC通过LOCK无效  0x1:USER区域的CRC通过LOCK有效        |
|             |  3  | NVR区域的CRC不通过的LOCK信号                                        |
|             |     | 0x0:NVR区域的CRC不通过LOCK无效  0x1:NVR区域的CRC不通过LOCK有效      |
|             |  2  | NVR区域的CRC通过的LOCK信号                                          |
|             |     | 0x0:NVR区域的CRC通过LOCK无效  0x1:NVR区域的CRC通过LOCK有效          |
|             |  1  | 代码区查空结果是否为空  0x0:代码区有代码  0x1:代码区没有代码        |
|             |  0  |                                                                     |
|             |---------------------------------------------------------------------------|
|             |     | Note:该寄存器默认值需要会根据出厂的配置不同而不同                   |
|-----------------------------------------------------------------------------------------|
******************************************************************************************/
// FLASH_ERRSTA
#define _FLASH_ERRSTA
#define FLASH_MAIN_CRC_OK(n)        ((n) << 7)  // 代码区的CRC是否通过
                                                // 0x0:没有通过/没有开启代码区CRC的功能  0x1:通过代码区CRC
#define FLASH_USER_NOPASS_LOCK(n)   ((n) << 5)  // USER区域的CRC不通过的LOCK信号
                                                // 0x0:USER区域的CRC不通过LOCK无效  0x1:USER区域的CRC不通过LOCK有效
#define FLASH_USER_LOCK(n)          ((n) << 4)  // USER区域的CRC通过的LOCK信号
                                                // 0x0:USER区域的CRC通过LOCK无效  0x1:USER区域的CRC通过LOCK有效
#define FLASH_NVR_NOPASS_LOCK(n)    ((n) << 3)  // NVR区域的CRC不通过的LOCK信号
                                                // 0x0:NVR区域的CRC不通过LOCK无效  0x1:NVR区域的CRC不通过LOCK有效
#define FLASH_NVR_CRCOK_LOCK(n)     ((n) << 2)  // NVR区域的CRC通过的LOCK信号
                                                // 0x0:NVR区域的CRC通过LOCK无效  0x1:NVR区域的CRC通过LOCK有效
#define FLASH_CHECK_EMPTY(n)        ((n) << 1)  // 代码区查空结果是否为空  0x0:代码区有代码  0x1:代码区没有代码

/********************************************************************************************
|-------------------------------------------------------------------------------------------|
|               | Bit |                    Description                                      |
|               |---------------------------------------------------------------------------|
|               |  7  | 上电过程超时标志          0x0:上电过程没有超时  0x1:上电过程超时    |
|               |  6  | 寄存器配置写/擦保护开启   0x0:写/擦保护关闭     0x1:写/擦保护开启   |
|               |  5  | 写/擦保护开启(USER区配置) 0x0:写/擦保护关闭     0x1:写/擦保护开启   |
| FLASH_DEBUGSTA|  4  | 读保护开启(USER区配置)    0x0:读保护关闭        0x1:读保护开启      |
|               |  3  | 页擦除权限                0x0:页擦除权限开启    0x1:页擦除权限关闭  |
|               |  2  | 扇区擦除权限              0x0:扇区擦除权限开启  0x1:扇区擦除权限关闭|
|               |  1  | 全擦权限标志              0x0:全擦权限开启      0x1:全擦权限关闭    |
|               |  0  | 写权限标志                0x0:写权限开启        0x1:写权限关闭      |
|               |---------------------------------------------------------------------------|
|               |     | Note:该寄存器默认值需要会根据出厂的配置不同而不同                   |
|-------------------------------------------------------------------------------------------|
********************************************************************************************/
// FLASH_DEBUGSTA
#define _FLASH_DEBUGSTA
#define FLASH_TIME_OUT(n)           ((n) << 7)  // 上电过程超时标志          0x0:上电过程没有超时  0x1:上电过程超时
#define FLASH_FUNCON_PROT(n)       ((n) << 6)  // 寄存器配置写/擦保护开启   0x0:写/擦保护关闭     0x1:写/擦保护开启
#define FLASH_FUN_PROT(n)           ((n) << 5)  // 写/擦保护开启(USER区配置) 0x0:写/擦保护关闭     0x1:写/擦保护开启
#define FLASH_RDPROT(n)             ((n) << 4)  // 读保护开启(USER区配置)    0x0:读保护关闭        0x1:读保护开启
#define FLASH_PER_LOCK(n)           ((n) << 3)  // 页擦除权限                0x0:页擦除权限开启    0x1:页擦除权限关闭
#define FLASH_SER_LOCK(n)           ((n) << 2)  // 扇区擦除权限              0x0:扇区擦除权限开启  0x1:扇区擦除权限关闭
#define FLASH_CER_LOCK(n)           ((n) << 1)  // 全擦权限标志              0x0:全擦权限开启      0x1:全擦权限关闭
#define FLASH_PROG_LOCK(n)          ((n) << 0)  // 写权限标志                0x0:写权限开启        0x1:写权限关闭

/********************************************************************************************
|-------------------------------------------------------------------------------------------|
|               | Bit |                    Description                                      |
|               |---------------------------------------------------------------------------|
|  FLASH_FUNCON | 7:0 | 每1bit代表可以保护2K的代码,保护写/擦                                |
|-------------------------------------------------------------------------------------------|
********************************************************************************************/
// FLASH_FUNCON
#define _FLASH_FUNCON
#define FLASH_FUN_CON(n)            ((n) << 0)  // 每1bit代表可以保护2K的代码,保护写/擦

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

#ifdef __cplusplus
}
#endif

#endif // __FLASH_H__

/**
  * @}
  */

/**
  * @}
  */

/*************************** (C) COPYRIGHT 2021 HUGE-IC ***** END OF FILE *****/
