C51 COMPILER V9.60.7.0   ADC                                                               06/13/2025 15:15:03 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Release\Objects\adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\adc.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) INCDIR
                    -(..\..\Libraries\Include;..\..\User) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\adc.lst) OBJECT(.\Release\O
                    -bjects\adc.obj)

line level    source

   1          #include "include.h"
   2          #include "main.h"
   3          
   4          #include "user_config.h"
   5          #include "adc.h"
   6          #include "temperature_adjust.h"
   7          
   8          u16 ntc_val;        // 存放求平均之后，得到的ad值
   9          u16 adjust_val;     // 存放求平均之后，得到的ad值
  10          u16 ntc_val_all;    // 存放采集的ad值总和，最后要对这个变量求平均
  11          u16 adjust_val_all; // 存放采集的ad值总和，最后要对这个变量求平均
  12          u8 adc_cnt = 0;
  13          u8 loop_cnt = 0;
  14          u16 adc0_val;
  15          u16 adc1_val;
  16          //    P1_MD0 &=  ~(GPIO_P13_MODE_SEL(0x3));
  17          //    P1_PU |=  (GPIO_P13_PULL_UP(0x1));
  18          //    P1_PD |=    (GPIO_P13_PULL_PD(1));
  19          void adc_init()
  20          {
  21   1          // 配置P27 p30为模拟输入模式 并且上拉
  22   1          P2_MD0 |= GPIO_P27_MODE_SEL(0x3); // P27设为模拟模式  PIN9
  23   1          P3_MD0 |= GPIO_P30_MODE_SEL(0x3); // P30设为模拟模式  PIN8
  24   1          P2_PU |= (GPIO_P27_PULL_UP(0x1)); // P27使能上拉      PIN9  用于初始化判断是否接入ntc
  25   1          P2_PD |= (GPIO_P27_PULL_PD(0x0)); // P27关闭下拉（上电默认就是0，这里或上0，操作无效）
  26   1          P3_PU |= (GPIO_P30_PULL_UP(0x1)); // P30使能上拉      PIN8  用于初始化判断是否接入电位器
  27   1          P3_PD |= (GPIO_P30_PULL_PD(0x0)); // P30关闭下拉
  28   1          // ADC配置
  29   1          ADC_ACON1 &= ~(ADC_VREF_SEL(0x7) | ADC_EXREF_SEL(0x1)); // 关闭外部参考电压
  30   1          ADC_ACON1 |= ADC_VREF_SEL(0x6) |                        // 选择内部参考电压VCCA  5v
  31   1                       ADC_TEN_SEL(0x3);
  32   1          ADC_ACON0 = ADC_CMP_EN(0x1) |  // 打开ADC中的CMP使能信号
  33   1                      ADC_BIAS_EN(0x1) | // 打开ADC偏置电流能使信号
  34   1                      ADC_BIAS_SEL(0x1);
  35   1      
  36   1          // P27 检测温度的引脚，使用adc通道0
  37   1          ADC_CHS0 = ADC_ANALOG_CHAN(0x17) | // P27通路
  38   1                     ADC_EXT_SEL(0x0);       // 选择外部通路
  39   1          ADC_CFG0 |= ADC_CHAN0_EN(0x1) |    // 使能通道0转换
  40   1                      ADC_EN(0x1);           // 使能A/D转换
  41   1      
  42   1          // P30 使用通道1
  43   1          ADC_CHS1 = ADC_ANALOG_CHAN(0x18) | // P30通路
  44   1                     ADC_EXT_SEL(0x0);       // 选择外部通路
  45   1          ADC_CFG0 |= ADC_CHAN1_EN(0x1) |    // 使能通道1转换
  46   1                      ADC_EN(0x1);           // 使能A/D转换
  47   1      
  48   1          delay_ms(1); // 等待ADC模块配置稳定，需要等待20us以上
  49   1      }
  50          
  51          /**
  52           * @brief 获取一次adc采集+滤波后的值
  53           *
C51 COMPILER V9.60.7.0   ADC                                                               06/13/2025 15:15:03 PAGE 2   

  54           * @param adc_channel_x  ADC_CHANNEL_0  或者 是 ADC_CHANNEL_1
  55           * @return u16
  56           */
  57          u16 adc_get_val(u8 adc_channel_x)
  58          {
  59   1          u8 i = 0; // adc采集次数的计数
  60   1          volatile u16 g_temp_value = 0;
  61   1          volatile u32 g_tmpbuff = 0;
  62   1          volatile u16 g_adcmax = 0;
  63   1          volatile u16 g_adcmin = 0xFFFF;
  64   1      
  65   1          // 采集20次，去掉前两次采样，再去掉一个最大值和一个最小值，再取平均值
  66   1          for (i = 0; i < 20; i++)
  67   1          {
  68   2              if (ADC_CHANNEL_0 == adc_channel_x)
  69   2              {
  70   3                  ADC_CFG0 |= ADC_CHAN0_TRG(0x1); // 触发ADC0转换
  71   3                  while (!(ADC_STA & ADC_CHAN0_DONE(0x1)))
  72   3                      ;                                                 // 等待转换完成
  73   3                  g_temp_value = (ADC_DATAH0 << 4) | (ADC_DATAL0 >> 4); // 读取 channel0 的值
  74   3                  ADC_STA = ADC_CHAN0_DONE(0x1);                        // 清除ADC0转换完成标志位
  75   3              }
  76   2              else // ADC_CHANNEL_1 ==  adc_channel_x
  77   2              {
  78   3                  ADC_CFG0 |= ADC_CHAN1_TRG(0x1); // 触发ADC1转换
  79   3                  while (!(ADC_STA & ADC_CHAN1_DONE(0x1)))
  80   3                      ;                                                 // 等待转换完成
  81   3                  g_temp_value = (ADC_DATAH1 << 4) | (ADC_DATAL1 >> 4); // 读取 channel1 的值
  82   3                  ADC_STA = ADC_CHAN1_DONE(0x1);                        // 清除ADC1转换完成标志位
  83   3              }
  84   2      
  85   2              if (i < 2)
  86   2                  continue; // 丢弃前两次采样的
  87   2              if (g_temp_value > g_adcmax)
  88   2                  g_adcmax = g_temp_value; // 最大
  89   2              if (g_temp_value < g_adcmin)
  90   2                  g_adcmin = g_temp_value; // 最小
  91   2      
  92   2              g_tmpbuff += g_temp_value;
  93   2          }
  94   1      
  95   1          g_tmpbuff -= g_adcmax;           // 去掉一个最大
  96   1          g_tmpbuff -= g_adcmin;           // 去掉一个最小
  97   1          g_temp_value = (g_tmpbuff >> 4); // 除以16，取平均值
  98   1      
  99   1          return g_temp_value;
 100   1      }
 101          
 102          void adc_val()
 103          {
 104   1          // ADC_CFG0 |= ADC_CHAN0_TRG(0x1); // 触发ADC0转换
 105   1          // while (!(ADC_STA & ADC_CHAN0_DONE(0x1)))
 106   1          //     ;                                             // 等待转换完成
 107   1          // ADC_STA = ADC_CHAN0_DONE(0x1);                    // 清除ADC0转换完成标志位
 108   1          // adc0_val = (ADC_DATAH0 << 4) | (ADC_DATAL0 >> 4); // 读取channel0的值
 109   1      
 110   1          ADC_CFG0 |= ADC_CHAN1_TRG(0x1); // 触发ADC1转换
 111   1          while (!(ADC_STA & ADC_CHAN1_DONE(0x1)))
 112   1              ;                                             // 等待转换完成
 113   1          ADC_STA = ADC_CHAN1_DONE(0x1);                    // 清除ADC1转换完成标志位
 114   1          adc1_val = (ADC_DATAH1 << 4) | (ADC_DATAL1 >> 4); // 读取channel1的值
 115   1      
C51 COMPILER V9.60.7.0   ADC                                                               06/13/2025 15:15:03 PAGE 3   

 116   1          // ntc_val_all += adc0_val;
 117   1          adjust_val_all += adc1_val;
 118   1      
 119   1          adc_cnt++;
 120   1          if (adc_cnt == 10) // 均值滤波
 121   1          {
 122   2              // ntc_val = ntc_val_all / 10;
 123   2              adjust_val = adjust_val_all / 10;
 124   2              adc_cnt = 0;
 125   2              // ntc_val_all = 0;
 126   2              adjust_val_all = 0;
 127   2          }
 128   1      
 129   1          { // 滑动平均滤波
 130   2      
 131   2              static bit flag_is_buff_initialized = 0; // 是否第一次进入(用于给滑动平均滤波的数组初始化)
 132   2              static u16 buff[20] = {0};               // 滑动平均滤波使用到的数组
 133   2              static u8 buff_index = 0;                // 滑动平均滤波使用到的数组下标
 134   2              u16 tmp_adc_val = adc_get_val(ADC_CHANNEL_0);
 135   2      
 136   2              if (0 == flag_is_buff_initialized) // 如果滑动平均滤波的数组未初始化
 137   2              {
 138   3                  u8 i = 0;
 139   3                  for (; i < ARRAY_SIZE(buff); i++)
 140   3                  {
 141   4                      buff[i] = tmp_adc_val; // 用第一次采集到的ad值 给滑动平均滤波的数组初始化
 142   4                  }
 143   3      
 144   3                  flag_is_buff_initialized = 1;
 145   3              }
 146   2      
 147   2              buff[buff_index] = tmp_adc_val;
 148   2              buff_index++;
 149   2              if (buff_index >= ARRAY_SIZE(buff))
 150   2              {
 151   3                  buff_index = 0;
 152   3              }
 153   2      
 154   2              {
 155   3                  u8 i = 0;
 156   3                  u32 sum = 0;
 157   3                  for (; i < ARRAY_SIZE(buff); i++)
 158   3                  {
 159   4                      sum += buff[i]; //
 160   4                  }
 161   3      
 162   3                  // sum /= (ARRAY_SIZE(buff));
 163   3                  ntc_val = sum / (ARRAY_SIZE(buff)); // 得到最终滤波后的ad值
 164   3              }
 165   2      
 166   2          } // 滑动平均滤波
 167   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    797    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     55      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
C51 COMPILER V9.60.7.0   ADC                                                               06/13/2025 15:15:03 PAGE 4   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
