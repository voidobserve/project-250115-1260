C51 COMPILER V9.60.7.0   MY_TIMER                                                          11/20/2024 14:32:27 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MY_TIMER
OBJECT MODULE PLACED IN .\Release\Objects\my_timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\my_timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) I
                    -NCDIR(..\..\Libraries\Include;..\..\User) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\my_timer.lst) OBJECT(.
                    -\Release\Objects\my_timer.obj)

line level    source

   1          #include "include.h"
   2          
   3          // 1ms
   4          void timer0_init()
   5          {
   6   1          __EnableIRQ(TMR0_IRQn);                                                         // ‰ΩøËÉΩtimer0‰∏≠Êñ≠
   7   1          IE_EA = 1;                                                                      // ‰ΩøËÉΩÊÄª‰∏≠Êñ≠
   8   1          
   9   1          #define PEROID_VAL               (SYSCLK/128/1000 - 1)                               // Âë®ÊúüÂÄº=Á≥ªÁ
             -ªüÊó∂Èíü/ÂàÜÈ¢ë/È¢ëÁéá - 1
  10   1          // ËÆæÁΩÆtimer0ÁöÑËÆ°Êï∞ÂäüËÉΩÔºåÈÖçÁΩÆ‰∏Ä‰∏™È¢ëÁéá‰∏∫1kHzÁöÑ‰∏≠Êñ≠
  11   1          TMR_ALLCON = TMR0_CNT_CLR(0x1);                                                 // Ê∏ÖÈô§ËÆ°Êï∞ÂÄº
  12   1          TMR0_PRH   = TMR_PERIOD_VAL_H((PEROID_VAL >> 8) & 0xFF);                        // Âë®ÊúüÂÄº
  13   1          TMR0_PRL   = TMR_PERIOD_VAL_L((PEROID_VAL >> 0) & 0xFF);
  14   1          TMR0_CONH  = TMR_PRD_PND(0x1)    | TMR_PRD_IRQ_EN(0x1);                         // ËÆ°Êï∞Á≠â‰∫éÂë®ÊúüÊ
             -ó∂ÂÖÅËÆ∏ÂèëÁîü‰∏≠Êñ≠
  15   1          TMR0_CONL  = TMR_SOURCE_SEL(0x7) | TMR_PRESCALE_SEL(0x7) | TMR_MODE_SEL(0x1);   // ÈÄâÊã©Á≥ªÁªüÊó∂ÈíüÔ
             -ºå128ÂàÜÈ¢ëÔºåËÆ°Êï∞Ê®°Âºè
  16   1      }
  17          
  18          extern void cap_timer(void);
  19          extern void l_pwr_timer_handler(void);
  20          extern void t_ctrl_timer_handler(void);
  21          extern void dly_pwr_on_handler(void);
  22          extern void ex_temp_adjust_timer();
  23          extern void adc_val();
  24          u16 ms_cnt = 0;
  25          void TIMR0_IRQHandler(void) interrupt TMR0_IRQn
  26          {
  27   1          // ËøõÂÖ•‰∏≠Êñ≠ËÆæÁΩÆIPÔºå‰∏çÂèØÂà†Èô§
  28   1          __IRQnIPnPush(TMR0_IRQn);
  29   1          
  30   1          // ---------------- Áî®Êà∑ÂáΩÊï∞Â§ÑÁêÜ -------------------
  31   1          
  32   1          // Âë®Êúü‰∏≠Êñ≠
  33   1          if(TMR0_CONH & TMR_PRD_PND(0x1)) {
  34   2              TMR0_CONH |= TMR_PRD_PND(0x1);          // Ê∏ÖÈô§pending 
  35   2              cap_timer();
  36   2                                adc_val();
  37   2              ms_cnt++;
  38   2              if(ms_cnt >= 1000)                //ÊµãËØï
  39   2              {
  40   3                  ms_cnt = 0;
  41   3                                                      ex_temp_adjust_timer();//ËøáÊ∏©ÈôçÂäüÁéá maxÂÄºÁî±ËøáÊ∏©ÁöÑÂÜ≥ÂÆö
  42   3                  t_ctrl_timer_handler();
  43   3                                                l_pwr_timer_handler();
  44   3                  dly_pwr_on_handler();               
  45   3              }
  46   2          }
  47   1          
  48   1          // ÈÄÄÂá∫‰∏≠Êñ≠ËÆæÁΩÆIPÔºå‰∏çÂèØÂà†Èô§
  49   1          __IRQnIPnPop(TMR0_IRQn);
  50   1      }
C51 COMPILER V9.60.7.0   MY_TIMER                                                          11/20/2024 14:32:27 PAGE 2   

  51          
  52          void pwm_init(void)
  53          {
  54   1          // ÈÖçÁΩÆTIMER4ÁöÑPWMÁ´ØÂè£ÔºöP21--TMR4_PWM
  55   1          #if 0
                              P1_MD1   &= ~GPIO_P15_MODE_SEL(0x03);
                 P1_MD1   |=  GPIO_P15_MODE_SEL(0x01);
                 FOUT_S15  =  GPIO_FOUT_TMR2_PWMOUT;                         // ÈÄâÊã©tmr4_pwm_o
              
              
                              P1_MD1   &= ~GPIO_P16_MODE_SEL(0x03);
                  P1_MD1   |=  GPIO_P16_MODE_SEL(0x01);
                  FOUT_S16  =  GPIO_FOUT_TMR2_PWMOUT;                         // ÈÄâÊã©tmr4_pwm_o
              
                  #define PEROID_PWM             (SYSCLK/8000 - 1)                             // Âë®ÊúüÂÄº=Á≥ªÁªüÊó∂Èíü
             -/ÂàÜÈ¢ë/È¢ëÁéá - 1
              
                  // ÈÖçÁΩÆÈ¢ëÁéá‰∏∫1kHZÁöÑPWM    PWMÈ¢ëÁéá=Á≥ªÁªüÊó∂Èíü/ÂàÜÈ¢ë/(Âë®ÊúüÂÄº+1)
                  TMR_ALLCON = TMR2_CNT_CLR(0x1);                                                // Ê∏ÖÈô§ËÆ°Êï∞ÂÄº
              
                  TMR2_PRH   = TMR_PERIOD_VAL_H((PEROID_PWM >> 8) & 0xFF);                       // Âë®ÊúüÂÄº
                  TMR2_PRL   = TMR_PERIOD_VAL_L((PEROID_PWM >> 0) & 0xFF);
              
              
                              
                  TMR2_PWMH  = TMR_PWM_VAL_H(((5999) >> 8) & 0xFF);                      // Âç†Á©∫ÊØîËÆæÁΩÆÂÄº
                  TMR2_PWML  = TMR_PWM_VAL_L(((5999) >> 0) & 0xFF);
              
                  TMR2_CONL  = TMR_SOURCE_SEL(0x7) | TMR_PRESCALE_SEL(0) | TMR_MODE_SEL(0x2);  // ÈÄâÊã©Á≥ªÁªüÊó∂ÈíüÔºå1
             -28ÂàÜÈ¢ëÔºåPWMÊ®°Âºè
              
                  TMR2_CONH  = TMR_PRD_PND(0x1)   | TMR_PRD_IRQ_EN(0x1);                         // ‰ΩøËÉΩËÆ°Êï∞‰∏≠Êñ≠
                  #endif
  82   1      
  83   1      #if 1
  84   1                                         
  85   1                      #define STMR0_PEROID_VAL               (SYSCLK/8000 - 1)                  
  86   1          STMR0_PSC     =  STMR_PRESCALE_VAL(0x07);                               
  87   1          STMR0_PRH     =  STMR_PRD_VAL_H((STMR0_PEROID_VAL >> 8) & 0xFF);        
  88   1          STMR0_PRL     =  STMR_PRD_VAL_L((STMR0_PEROID_VAL >> 0) & 0xFF);        
  89   1          STMR0_CMPAH   =  STMR_CMPA_VAL_H(((0) >> 8) & 0xFF);   //ÊØîËæÉÂÄº
  90   1          STMR0_CMPAL   =  STMR_CMPA_VAL_L(((0) >> 0) & 0xFF);   //ÊØîËæÉÂÄº
  91   1          //STMR_PWMVALA &= ~STMR_0_PWMVALA(0x1);                    
  92   1                      STMR_PWMVALA |= STMR_0_PWMVALA(0x1);  
  93   1                                    
  94   1          STMR_CNTMD   |=  STMR_0_CNT_MODE(0x1);         //ËøûÁª≠ËÆ°Êï∞Ê®°Âºè                         
  95   1          STMR_LOADEN  |=  STMR_0_LOAD_EN(0x1);        //Ëá™Âä®Ë£ÖËΩΩ‰ΩøËÉΩ                           
  96   1          STMR_CNTCLR  |=  STMR_0_CNT_CLR(0x1);         //                          
  97   1          STMR_CNTEN   |=  STMR_0_CNT_EN(0x1);             //‰ΩøËÉΩ  
  98   1                      STMR_PWMEN   |=  STMR_0_PWM_EN(0x1);    // PWMËæìÂá∫‰ΩøËÉΩ              
  99   1                      P1_MD1   &= ~GPIO_P16_MODE_SEL(0x03);
 100   1          P1_MD1   |=  GPIO_P16_MODE_SEL(0x01);
 101   1          FOUT_S16  =  GPIO_FOUT_STMR0_PWMOUT; 
 102   1      #endif          
 103   1      }
 104          
 105          
 106          
 107          


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.7.0   MY_TIMER                                                          11/20/2024 14:32:27 PAGE 3   

   CODE SIZE        =    223    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
